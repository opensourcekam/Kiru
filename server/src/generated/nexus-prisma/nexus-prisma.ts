/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      File: FileObject
      Influencer: InfluencerObject
      Location: LocationObject
      Geo: GeoObject
      MediaKit: MediaKitObject
      Interest: InterestObject
      Social: SocialObject
      Instagram: InstagramObject
      Youtube: YoutubeObject
      Twitter: TwitterObject
      FileConnection: FileConnectionObject
      PageInfo: PageInfoObject
      FileEdge: FileEdgeObject
      AggregateFile: AggregateFileObject
      LocationConnection: LocationConnectionObject
      LocationEdge: LocationEdgeObject
      AggregateLocation: AggregateLocationObject
      GeoConnection: GeoConnectionObject
      GeoEdge: GeoEdgeObject
      AggregateGeo: AggregateGeoObject
      InfluencerConnection: InfluencerConnectionObject
      InfluencerEdge: InfluencerEdgeObject
      AggregateInfluencer: AggregateInfluencerObject
      MediaKitConnection: MediaKitConnectionObject
      MediaKitEdge: MediaKitEdgeObject
      AggregateMediaKit: AggregateMediaKitObject
      InterestConnection: InterestConnectionObject
      InterestEdge: InterestEdgeObject
      AggregateInterest: AggregateInterestObject
      Jobs: JobsObject
      Company: CompanyObject
      Feedback: FeedbackObject
      JobsConnection: JobsConnectionObject
      JobsEdge: JobsEdgeObject
      AggregateJobs: AggregateJobsObject
      SocialConnection: SocialConnectionObject
      SocialEdge: SocialEdgeObject
      AggregateSocial: AggregateSocialObject
      InstagramConnection: InstagramConnectionObject
      InstagramEdge: InstagramEdgeObject
      AggregateInstagram: AggregateInstagramObject
      TwitterConnection: TwitterConnectionObject
      TwitterEdge: TwitterEdgeObject
      AggregateTwitter: AggregateTwitterObject
      YoutubeConnection: YoutubeConnectionObject
      YoutubeEdge: YoutubeEdgeObject
      AggregateYoutube: AggregateYoutubeObject
      FeedbackConnection: FeedbackConnectionObject
      FeedbackEdge: FeedbackEdgeObject
      AggregateFeedback: AggregateFeedbackObject
      CompanyConnection: CompanyConnectionObject
      CompanyEdge: CompanyEdgeObject
      AggregateCompany: AggregateCompanyObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      FileSubscriptionPayload: FileSubscriptionPayloadObject
      FilePreviousValues: FilePreviousValuesObject
      LocationSubscriptionPayload: LocationSubscriptionPayloadObject
      LocationPreviousValues: LocationPreviousValuesObject
      GeoSubscriptionPayload: GeoSubscriptionPayloadObject
      GeoPreviousValues: GeoPreviousValuesObject
      InfluencerSubscriptionPayload: InfluencerSubscriptionPayloadObject
      InfluencerPreviousValues: InfluencerPreviousValuesObject
      MediaKitSubscriptionPayload: MediaKitSubscriptionPayloadObject
      MediaKitPreviousValues: MediaKitPreviousValuesObject
      InterestSubscriptionPayload: InterestSubscriptionPayloadObject
      InterestPreviousValues: InterestPreviousValuesObject
      JobsSubscriptionPayload: JobsSubscriptionPayloadObject
      JobsPreviousValues: JobsPreviousValuesObject
      SocialSubscriptionPayload: SocialSubscriptionPayloadObject
      SocialPreviousValues: SocialPreviousValuesObject
      InstagramSubscriptionPayload: InstagramSubscriptionPayloadObject
      InstagramPreviousValues: InstagramPreviousValuesObject
      TwitterSubscriptionPayload: TwitterSubscriptionPayloadObject
      TwitterPreviousValues: TwitterPreviousValuesObject
      YoutubeSubscriptionPayload: YoutubeSubscriptionPayloadObject
      YoutubePreviousValues: YoutubePreviousValuesObject
      FeedbackSubscriptionPayload: FeedbackSubscriptionPayloadObject
      FeedbackPreviousValues: FeedbackPreviousValuesObject
      CompanySubscriptionPayload: CompanySubscriptionPayloadObject
      CompanyPreviousValues: CompanyPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      File: FileFieldDetails
      Influencer: InfluencerFieldDetails
      Location: LocationFieldDetails
      Geo: GeoFieldDetails
      MediaKit: MediaKitFieldDetails
      Interest: InterestFieldDetails
      Social: SocialFieldDetails
      Instagram: InstagramFieldDetails
      Youtube: YoutubeFieldDetails
      Twitter: TwitterFieldDetails
      FileConnection: FileConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      FileEdge: FileEdgeFieldDetails
      AggregateFile: AggregateFileFieldDetails
      LocationConnection: LocationConnectionFieldDetails
      LocationEdge: LocationEdgeFieldDetails
      AggregateLocation: AggregateLocationFieldDetails
      GeoConnection: GeoConnectionFieldDetails
      GeoEdge: GeoEdgeFieldDetails
      AggregateGeo: AggregateGeoFieldDetails
      InfluencerConnection: InfluencerConnectionFieldDetails
      InfluencerEdge: InfluencerEdgeFieldDetails
      AggregateInfluencer: AggregateInfluencerFieldDetails
      MediaKitConnection: MediaKitConnectionFieldDetails
      MediaKitEdge: MediaKitEdgeFieldDetails
      AggregateMediaKit: AggregateMediaKitFieldDetails
      InterestConnection: InterestConnectionFieldDetails
      InterestEdge: InterestEdgeFieldDetails
      AggregateInterest: AggregateInterestFieldDetails
      Jobs: JobsFieldDetails
      Company: CompanyFieldDetails
      Feedback: FeedbackFieldDetails
      JobsConnection: JobsConnectionFieldDetails
      JobsEdge: JobsEdgeFieldDetails
      AggregateJobs: AggregateJobsFieldDetails
      SocialConnection: SocialConnectionFieldDetails
      SocialEdge: SocialEdgeFieldDetails
      AggregateSocial: AggregateSocialFieldDetails
      InstagramConnection: InstagramConnectionFieldDetails
      InstagramEdge: InstagramEdgeFieldDetails
      AggregateInstagram: AggregateInstagramFieldDetails
      TwitterConnection: TwitterConnectionFieldDetails
      TwitterEdge: TwitterEdgeFieldDetails
      AggregateTwitter: AggregateTwitterFieldDetails
      YoutubeConnection: YoutubeConnectionFieldDetails
      YoutubeEdge: YoutubeEdgeFieldDetails
      AggregateYoutube: AggregateYoutubeFieldDetails
      FeedbackConnection: FeedbackConnectionFieldDetails
      FeedbackEdge: FeedbackEdgeFieldDetails
      AggregateFeedback: AggregateFeedbackFieldDetails
      CompanyConnection: CompanyConnectionFieldDetails
      CompanyEdge: CompanyEdgeFieldDetails
      AggregateCompany: AggregateCompanyFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      FileSubscriptionPayload: FileSubscriptionPayloadFieldDetails
      FilePreviousValues: FilePreviousValuesFieldDetails
      LocationSubscriptionPayload: LocationSubscriptionPayloadFieldDetails
      LocationPreviousValues: LocationPreviousValuesFieldDetails
      GeoSubscriptionPayload: GeoSubscriptionPayloadFieldDetails
      GeoPreviousValues: GeoPreviousValuesFieldDetails
      InfluencerSubscriptionPayload: InfluencerSubscriptionPayloadFieldDetails
      InfluencerPreviousValues: InfluencerPreviousValuesFieldDetails
      MediaKitSubscriptionPayload: MediaKitSubscriptionPayloadFieldDetails
      MediaKitPreviousValues: MediaKitPreviousValuesFieldDetails
      InterestSubscriptionPayload: InterestSubscriptionPayloadFieldDetails
      InterestPreviousValues: InterestPreviousValuesFieldDetails
      JobsSubscriptionPayload: JobsSubscriptionPayloadFieldDetails
      JobsPreviousValues: JobsPreviousValuesFieldDetails
      SocialSubscriptionPayload: SocialSubscriptionPayloadFieldDetails
      SocialPreviousValues: SocialPreviousValuesFieldDetails
      InstagramSubscriptionPayload: InstagramSubscriptionPayloadFieldDetails
      InstagramPreviousValues: InstagramPreviousValuesFieldDetails
      TwitterSubscriptionPayload: TwitterSubscriptionPayloadFieldDetails
      TwitterPreviousValues: TwitterPreviousValuesFieldDetails
      YoutubeSubscriptionPayload: YoutubeSubscriptionPayloadFieldDetails
      YoutubePreviousValues: YoutubePreviousValuesFieldDetails
      FeedbackSubscriptionPayload: FeedbackSubscriptionPayloadFieldDetails
      FeedbackPreviousValues: FeedbackPreviousValuesFieldDetails
      CompanySubscriptionPayload: CompanySubscriptionPayloadFieldDetails
      CompanyPreviousValues: CompanyPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      FileWhereUniqueInput: FileWhereUniqueInputInputObject
      MediaKitWhereInput: MediaKitWhereInputInputObject
      InfluencerWhereInput: InfluencerWhereInputInputObject
      LocationWhereInput: LocationWhereInputInputObject
      GeoWhereInput: GeoWhereInputInputObject
      FileWhereInput: FileWhereInputInputObject
      SocialWhereInput: SocialWhereInputInputObject
      InstagramWhereInput: InstagramWhereInputInputObject
      YoutubeWhereInput: YoutubeWhereInputInputObject
      TwitterWhereInput: TwitterWhereInputInputObject
      InterestWhereInput: InterestWhereInputInputObject
      LocationWhereUniqueInput: LocationWhereUniqueInputInputObject
      GeoWhereUniqueInput: GeoWhereUniqueInputInputObject
      InfluencerWhereUniqueInput: InfluencerWhereUniqueInputInputObject
      MediaKitWhereUniqueInput: MediaKitWhereUniqueInputInputObject
      InterestWhereUniqueInput: InterestWhereUniqueInputInputObject
      JobsWhereUniqueInput: JobsWhereUniqueInputInputObject
      JobsWhereInput: JobsWhereInputInputObject
      CompanyWhereInput: CompanyWhereInputInputObject
      FeedbackWhereInput: FeedbackWhereInputInputObject
      SocialWhereUniqueInput: SocialWhereUniqueInputInputObject
      InstagramWhereUniqueInput: InstagramWhereUniqueInputInputObject
      TwitterWhereUniqueInput: TwitterWhereUniqueInputInputObject
      YoutubeWhereUniqueInput: YoutubeWhereUniqueInputInputObject
      FeedbackWhereUniqueInput: FeedbackWhereUniqueInputInputObject
      CompanyWhereUniqueInput: CompanyWhereUniqueInputInputObject
      FileCreateInput: FileCreateInputInputObject
      InfluencerCreateOneWithoutFilesInput: InfluencerCreateOneWithoutFilesInputInputObject
      InfluencerCreateWithoutFilesInput: InfluencerCreateWithoutFilesInputInputObject
      LocationCreateOneWithoutInfluencerInput: LocationCreateOneWithoutInfluencerInputInputObject
      LocationCreateWithoutInfluencerInput: LocationCreateWithoutInfluencerInputInputObject
      GeoCreateOneWithoutLocationInput: GeoCreateOneWithoutLocationInputInputObject
      GeoCreateWithoutLocationInput: GeoCreateWithoutLocationInputInputObject
      MediaKitCreateManyWithoutInfluencerInput: MediaKitCreateManyWithoutInfluencerInputInputObject
      MediaKitCreateWithoutInfluencerInput: MediaKitCreateWithoutInfluencerInputInputObject
      FileCreateManyWithoutMediaKitInput: FileCreateManyWithoutMediaKitInputInputObject
      FileCreateWithoutMediaKitInput: FileCreateWithoutMediaKitInputInputObject
      InterestCreateManyInput: InterestCreateManyInputInputObject
      InterestCreateInput: InterestCreateInputInputObject
      InfluencerCreateOneInput: InfluencerCreateOneInputInputObject
      InfluencerCreateInput: InfluencerCreateInputInputObject
      FileCreateManyWithoutInfluencerInput: FileCreateManyWithoutInfluencerInputInputObject
      FileCreateWithoutInfluencerInput: FileCreateWithoutInfluencerInputInputObject
      MediaKitCreateManyWithoutFilesInput: MediaKitCreateManyWithoutFilesInputInputObject
      MediaKitCreateWithoutFilesInput: MediaKitCreateWithoutFilesInputInputObject
      InfluencerCreateOneWithoutMediaKitInput: InfluencerCreateOneWithoutMediaKitInputInputObject
      InfluencerCreateWithoutMediaKitInput: InfluencerCreateWithoutMediaKitInputInputObject
      SocialCreateOneWithoutInfluencerInput: SocialCreateOneWithoutInfluencerInputInputObject
      SocialCreateWithoutInfluencerInput: SocialCreateWithoutInfluencerInputInputObject
      InstagramCreateOneInput: InstagramCreateOneInputInputObject
      InstagramCreateInput: InstagramCreateInputInputObject
      YoutubeCreateOneInput: YoutubeCreateOneInputInputObject
      YoutubeCreateInput: YoutubeCreateInputInputObject
      TwitterCreateOneInput: TwitterCreateOneInputInputObject
      TwitterCreateInput: TwitterCreateInputInputObject
      FileUpdateInput: FileUpdateInputInputObject
      InfluencerUpdateOneRequiredWithoutFilesInput: InfluencerUpdateOneRequiredWithoutFilesInputInputObject
      InfluencerUpdateWithoutFilesDataInput: InfluencerUpdateWithoutFilesDataInputInputObject
      LocationUpdateOneWithoutInfluencerInput: LocationUpdateOneWithoutInfluencerInputInputObject
      LocationUpdateWithoutInfluencerDataInput: LocationUpdateWithoutInfluencerDataInputInputObject
      GeoUpdateOneWithoutLocationInput: GeoUpdateOneWithoutLocationInputInputObject
      GeoUpdateWithoutLocationDataInput: GeoUpdateWithoutLocationDataInputInputObject
      GeoUpsertWithoutLocationInput: GeoUpsertWithoutLocationInputInputObject
      LocationUpsertWithoutInfluencerInput: LocationUpsertWithoutInfluencerInputInputObject
      MediaKitUpdateManyWithoutInfluencerInput: MediaKitUpdateManyWithoutInfluencerInputInputObject
      MediaKitUpdateWithWhereUniqueWithoutInfluencerInput: MediaKitUpdateWithWhereUniqueWithoutInfluencerInputInputObject
      MediaKitUpdateWithoutInfluencerDataInput: MediaKitUpdateWithoutInfluencerDataInputInputObject
      FileUpdateManyWithoutMediaKitInput: FileUpdateManyWithoutMediaKitInputInputObject
      FileUpdateWithWhereUniqueWithoutMediaKitInput: FileUpdateWithWhereUniqueWithoutMediaKitInputInputObject
      FileUpdateWithoutMediaKitDataInput: FileUpdateWithoutMediaKitDataInputInputObject
      FileUpsertWithWhereUniqueWithoutMediaKitInput: FileUpsertWithWhereUniqueWithoutMediaKitInputInputObject
      FileScalarWhereInput: FileScalarWhereInputInputObject
      FileUpdateManyWithWhereNestedInput: FileUpdateManyWithWhereNestedInputInputObject
      FileUpdateManyDataInput: FileUpdateManyDataInputInputObject
      InterestUpdateManyInput: InterestUpdateManyInputInputObject
      InterestUpdateWithWhereUniqueNestedInput: InterestUpdateWithWhereUniqueNestedInputInputObject
      InterestUpdateDataInput: InterestUpdateDataInputInputObject
      InfluencerUpdateOneInput: InfluencerUpdateOneInputInputObject
      InfluencerUpdateDataInput: InfluencerUpdateDataInputInputObject
      FileUpdateManyWithoutInfluencerInput: FileUpdateManyWithoutInfluencerInputInputObject
      FileUpdateWithWhereUniqueWithoutInfluencerInput: FileUpdateWithWhereUniqueWithoutInfluencerInputInputObject
      FileUpdateWithoutInfluencerDataInput: FileUpdateWithoutInfluencerDataInputInputObject
      MediaKitUpdateManyWithoutFilesInput: MediaKitUpdateManyWithoutFilesInputInputObject
      MediaKitUpdateWithWhereUniqueWithoutFilesInput: MediaKitUpdateWithWhereUniqueWithoutFilesInputInputObject
      MediaKitUpdateWithoutFilesDataInput: MediaKitUpdateWithoutFilesDataInputInputObject
      InfluencerUpdateOneWithoutMediaKitInput: InfluencerUpdateOneWithoutMediaKitInputInputObject
      InfluencerUpdateWithoutMediaKitDataInput: InfluencerUpdateWithoutMediaKitDataInputInputObject
      SocialUpdateOneWithoutInfluencerInput: SocialUpdateOneWithoutInfluencerInputInputObject
      SocialUpdateWithoutInfluencerDataInput: SocialUpdateWithoutInfluencerDataInputInputObject
      InstagramUpdateOneInput: InstagramUpdateOneInputInputObject
      InstagramUpdateDataInput: InstagramUpdateDataInputInputObject
      InstagramUpsertNestedInput: InstagramUpsertNestedInputInputObject
      YoutubeUpdateOneInput: YoutubeUpdateOneInputInputObject
      YoutubeUpdateDataInput: YoutubeUpdateDataInputInputObject
      YoutubeUpsertNestedInput: YoutubeUpsertNestedInputInputObject
      TwitterUpdateOneInput: TwitterUpdateOneInputInputObject
      TwitterUpdateDataInput: TwitterUpdateDataInputInputObject
      TwitterUpsertNestedInput: TwitterUpsertNestedInputInputObject
      SocialUpsertWithoutInfluencerInput: SocialUpsertWithoutInfluencerInputInputObject
      InfluencerUpsertWithoutMediaKitInput: InfluencerUpsertWithoutMediaKitInputInputObject
      MediaKitUpsertWithWhereUniqueWithoutFilesInput: MediaKitUpsertWithWhereUniqueWithoutFilesInputInputObject
      MediaKitScalarWhereInput: MediaKitScalarWhereInputInputObject
      MediaKitUpdateManyWithWhereNestedInput: MediaKitUpdateManyWithWhereNestedInputInputObject
      MediaKitUpdateManyDataInput: MediaKitUpdateManyDataInputInputObject
      FileUpsertWithWhereUniqueWithoutInfluencerInput: FileUpsertWithWhereUniqueWithoutInfluencerInputInputObject
      InfluencerUpsertNestedInput: InfluencerUpsertNestedInputInputObject
      InterestUpsertWithWhereUniqueNestedInput: InterestUpsertWithWhereUniqueNestedInputInputObject
      InterestScalarWhereInput: InterestScalarWhereInputInputObject
      InterestUpdateManyWithWhereNestedInput: InterestUpdateManyWithWhereNestedInputInputObject
      InterestUpdateManyDataInput: InterestUpdateManyDataInputInputObject
      MediaKitUpsertWithWhereUniqueWithoutInfluencerInput: MediaKitUpsertWithWhereUniqueWithoutInfluencerInputInputObject
      InfluencerUpsertWithoutFilesInput: InfluencerUpsertWithoutFilesInputInputObject
      FileUpdateManyMutationInput: FileUpdateManyMutationInputInputObject
      LocationCreateInput: LocationCreateInputInputObject
      InfluencerCreateOneWithoutLocationInput: InfluencerCreateOneWithoutLocationInputInputObject
      InfluencerCreateWithoutLocationInput: InfluencerCreateWithoutLocationInputInputObject
      LocationUpdateInput: LocationUpdateInputInputObject
      InfluencerUpdateOneWithoutLocationInput: InfluencerUpdateOneWithoutLocationInputInputObject
      InfluencerUpdateWithoutLocationDataInput: InfluencerUpdateWithoutLocationDataInputInputObject
      InfluencerUpsertWithoutLocationInput: InfluencerUpsertWithoutLocationInputInputObject
      LocationUpdateManyMutationInput: LocationUpdateManyMutationInputInputObject
      GeoCreateInput: GeoCreateInputInputObject
      LocationCreateOneWithoutGeoInput: LocationCreateOneWithoutGeoInputInputObject
      LocationCreateWithoutGeoInput: LocationCreateWithoutGeoInputInputObject
      GeoUpdateInput: GeoUpdateInputInputObject
      LocationUpdateOneWithoutGeoInput: LocationUpdateOneWithoutGeoInputInputObject
      LocationUpdateWithoutGeoDataInput: LocationUpdateWithoutGeoDataInputInputObject
      LocationUpsertWithoutGeoInput: LocationUpsertWithoutGeoInputInputObject
      GeoUpdateManyMutationInput: GeoUpdateManyMutationInputInputObject
      InfluencerUpdateInput: InfluencerUpdateInputInputObject
      InfluencerUpdateManyMutationInput: InfluencerUpdateManyMutationInputInputObject
      MediaKitCreateInput: MediaKitCreateInputInputObject
      MediaKitUpdateInput: MediaKitUpdateInputInputObject
      MediaKitUpdateManyMutationInput: MediaKitUpdateManyMutationInputInputObject
      InterestUpdateInput: InterestUpdateInputInputObject
      InterestUpdateManyMutationInput: InterestUpdateManyMutationInputInputObject
      JobsCreateInput: JobsCreateInputInputObject
      CompanyCreateOneWithoutJobsInput: CompanyCreateOneWithoutJobsInputInputObject
      CompanyCreateWithoutJobsInput: CompanyCreateWithoutJobsInputInputObject
      FeedbackCreateOneWithoutCompanyInput: FeedbackCreateOneWithoutCompanyInputInputObject
      FeedbackCreateWithoutCompanyInput: FeedbackCreateWithoutCompanyInputInputObject
      JobsUpdateInput: JobsUpdateInputInputObject
      CompanyUpdateOneWithoutJobsInput: CompanyUpdateOneWithoutJobsInputInputObject
      CompanyUpdateWithoutJobsDataInput: CompanyUpdateWithoutJobsDataInputInputObject
      FeedbackUpdateOneWithoutCompanyInput: FeedbackUpdateOneWithoutCompanyInputInputObject
      FeedbackUpdateWithoutCompanyDataInput: FeedbackUpdateWithoutCompanyDataInputInputObject
      FeedbackUpsertWithoutCompanyInput: FeedbackUpsertWithoutCompanyInputInputObject
      CompanyUpsertWithoutJobsInput: CompanyUpsertWithoutJobsInputInputObject
      JobsUpdateManyMutationInput: JobsUpdateManyMutationInputInputObject
      SocialCreateInput: SocialCreateInputInputObject
      InfluencerCreateOneWithoutSocialInput: InfluencerCreateOneWithoutSocialInputInputObject
      InfluencerCreateWithoutSocialInput: InfluencerCreateWithoutSocialInputInputObject
      SocialUpdateInput: SocialUpdateInputInputObject
      InfluencerUpdateOneWithoutSocialInput: InfluencerUpdateOneWithoutSocialInputInputObject
      InfluencerUpdateWithoutSocialDataInput: InfluencerUpdateWithoutSocialDataInputInputObject
      InfluencerUpsertWithoutSocialInput: InfluencerUpsertWithoutSocialInputInputObject
      SocialUpdateManyMutationInput: SocialUpdateManyMutationInputInputObject
      InstagramUpdateInput: InstagramUpdateInputInputObject
      InstagramUpdateManyMutationInput: InstagramUpdateManyMutationInputInputObject
      TwitterUpdateInput: TwitterUpdateInputInputObject
      TwitterUpdateManyMutationInput: TwitterUpdateManyMutationInputInputObject
      YoutubeUpdateInput: YoutubeUpdateInputInputObject
      YoutubeUpdateManyMutationInput: YoutubeUpdateManyMutationInputInputObject
      FeedbackCreateInput: FeedbackCreateInputInputObject
      CompanyCreateOneWithoutFeedbackInput: CompanyCreateOneWithoutFeedbackInputInputObject
      CompanyCreateWithoutFeedbackInput: CompanyCreateWithoutFeedbackInputInputObject
      JobsCreateManyWithoutCompanyInput: JobsCreateManyWithoutCompanyInputInputObject
      JobsCreateWithoutCompanyInput: JobsCreateWithoutCompanyInputInputObject
      FeedbackUpdateInput: FeedbackUpdateInputInputObject
      CompanyUpdateOneWithoutFeedbackInput: CompanyUpdateOneWithoutFeedbackInputInputObject
      CompanyUpdateWithoutFeedbackDataInput: CompanyUpdateWithoutFeedbackDataInputInputObject
      JobsUpdateManyWithoutCompanyInput: JobsUpdateManyWithoutCompanyInputInputObject
      JobsUpdateWithWhereUniqueWithoutCompanyInput: JobsUpdateWithWhereUniqueWithoutCompanyInputInputObject
      JobsUpdateWithoutCompanyDataInput: JobsUpdateWithoutCompanyDataInputInputObject
      JobsUpsertWithWhereUniqueWithoutCompanyInput: JobsUpsertWithWhereUniqueWithoutCompanyInputInputObject
      JobsScalarWhereInput: JobsScalarWhereInputInputObject
      JobsUpdateManyWithWhereNestedInput: JobsUpdateManyWithWhereNestedInputInputObject
      JobsUpdateManyDataInput: JobsUpdateManyDataInputInputObject
      CompanyUpsertWithoutFeedbackInput: CompanyUpsertWithoutFeedbackInputInputObject
      FeedbackUpdateManyMutationInput: FeedbackUpdateManyMutationInputInputObject
      CompanyCreateInput: CompanyCreateInputInputObject
      CompanyUpdateInput: CompanyUpdateInputInputObject
      CompanyUpdateManyMutationInput: CompanyUpdateManyMutationInputInputObject
      FileSubscriptionWhereInput: FileSubscriptionWhereInputInputObject
      LocationSubscriptionWhereInput: LocationSubscriptionWhereInputInputObject
      GeoSubscriptionWhereInput: GeoSubscriptionWhereInputInputObject
      InfluencerSubscriptionWhereInput: InfluencerSubscriptionWhereInputInputObject
      MediaKitSubscriptionWhereInput: MediaKitSubscriptionWhereInputInputObject
      InterestSubscriptionWhereInput: InterestSubscriptionWhereInputInputObject
      JobsSubscriptionWhereInput: JobsSubscriptionWhereInputInputObject
      SocialSubscriptionWhereInput: SocialSubscriptionWhereInputInputObject
      InstagramSubscriptionWhereInput: InstagramSubscriptionWhereInputInputObject
      TwitterSubscriptionWhereInput: TwitterSubscriptionWhereInputInputObject
      YoutubeSubscriptionWhereInput: YoutubeSubscriptionWhereInputInputObject
      FeedbackSubscriptionWhereInput: FeedbackSubscriptionWhereInputInputObject
      CompanySubscriptionWhereInput: CompanySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Status: StatusValues,
    MediaKitOrderByInput: MediaKitOrderByInputValues,
    FileOrderByInput: FileOrderByInputValues,
    InterestOrderByInput: InterestOrderByInputValues,
    LocationOrderByInput: LocationOrderByInputValues,
    GeoOrderByInput: GeoOrderByInputValues,
    InfluencerOrderByInput: InfluencerOrderByInputValues,
    JobsOrderByInput: JobsOrderByInputValues,
    SocialOrderByInput: SocialOrderByInputValues,
    InstagramOrderByInput: InstagramOrderByInputValues,
    TwitterOrderByInput: TwitterOrderByInputValues,
    YoutubeOrderByInput: YoutubeOrderByInputValues,
    FeedbackOrderByInput: FeedbackOrderByInputValues,
    CompanyOrderByInput: CompanyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'file', args?: QueryFileArgs[] | false, alias?: string  } 
  | { name: 'files', args?: QueryFilesArgs[] | false, alias?: string  } 
  | { name: 'filesConnection', args?: QueryFilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'location', args?: QueryLocationArgs[] | false, alias?: string  } 
  | { name: 'locations', args?: QueryLocationsArgs[] | false, alias?: string  } 
  | { name: 'locationsConnection', args?: QueryLocationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'geo', args?: QueryGeoArgs[] | false, alias?: string  } 
  | { name: 'geos', args?: QueryGeosArgs[] | false, alias?: string  } 
  | { name: 'geosConnection', args?: QueryGeosConnectionArgs[] | false, alias?: string  } 
  | { name: 'influencer', args?: QueryInfluencerArgs[] | false, alias?: string  } 
  | { name: 'influencers', args?: QueryInfluencersArgs[] | false, alias?: string  } 
  | { name: 'influencersConnection', args?: QueryInfluencersConnectionArgs[] | false, alias?: string  } 
  | { name: 'mediaKit', args?: QueryMediaKitArgs[] | false, alias?: string  } 
  | { name: 'mediaKits', args?: QueryMediaKitsArgs[] | false, alias?: string  } 
  | { name: 'mediaKitsConnection', args?: QueryMediaKitsConnectionArgs[] | false, alias?: string  } 
  | { name: 'interest', args?: QueryInterestArgs[] | false, alias?: string  } 
  | { name: 'interests', args?: QueryInterestsArgs[] | false, alias?: string  } 
  | { name: 'interestsConnection', args?: QueryInterestsConnectionArgs[] | false, alias?: string  } 
  | { name: 'jobs', args?: QueryJobsArgs[] | false, alias?: string  } 
  | { name: 'jobses', args?: QueryJobsesArgs[] | false, alias?: string  } 
  | { name: 'jobsesConnection', args?: QueryJobsesConnectionArgs[] | false, alias?: string  } 
  | { name: 'social', args?: QuerySocialArgs[] | false, alias?: string  } 
  | { name: 'socials', args?: QuerySocialsArgs[] | false, alias?: string  } 
  | { name: 'socialsConnection', args?: QuerySocialsConnectionArgs[] | false, alias?: string  } 
  | { name: 'instagram', args?: QueryInstagramArgs[] | false, alias?: string  } 
  | { name: 'instagrams', args?: QueryInstagramsArgs[] | false, alias?: string  } 
  | { name: 'instagramsConnection', args?: QueryInstagramsConnectionArgs[] | false, alias?: string  } 
  | { name: 'twitter', args?: QueryTwitterArgs[] | false, alias?: string  } 
  | { name: 'twitters', args?: QueryTwittersArgs[] | false, alias?: string  } 
  | { name: 'twittersConnection', args?: QueryTwittersConnectionArgs[] | false, alias?: string  } 
  | { name: 'youtube', args?: QueryYoutubeArgs[] | false, alias?: string  } 
  | { name: 'youtubes', args?: QueryYoutubesArgs[] | false, alias?: string  } 
  | { name: 'youtubesConnection', args?: QueryYoutubesConnectionArgs[] | false, alias?: string  } 
  | { name: 'feedback', args?: QueryFeedbackArgs[] | false, alias?: string  } 
  | { name: 'feedbacks', args?: QueryFeedbacksArgs[] | false, alias?: string  } 
  | { name: 'feedbacksConnection', args?: QueryFeedbacksConnectionArgs[] | false, alias?: string  } 
  | { name: 'company', args?: QueryCompanyArgs[] | false, alias?: string  } 
  | { name: 'companies', args?: QueryCompaniesArgs[] | false, alias?: string  } 
  | { name: 'companiesConnection', args?: QueryCompaniesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'file'
  | 'files'
  | 'filesConnection'
  | 'location'
  | 'locations'
  | 'locationsConnection'
  | 'geo'
  | 'geos'
  | 'geosConnection'
  | 'influencer'
  | 'influencers'
  | 'influencersConnection'
  | 'mediaKit'
  | 'mediaKits'
  | 'mediaKitsConnection'
  | 'interest'
  | 'interests'
  | 'interestsConnection'
  | 'jobs'
  | 'jobses'
  | 'jobsesConnection'
  | 'social'
  | 'socials'
  | 'socialsConnection'
  | 'instagram'
  | 'instagrams'
  | 'instagramsConnection'
  | 'twitter'
  | 'twitters'
  | 'twittersConnection'
  | 'youtube'
  | 'youtubes'
  | 'youtubesConnection'
  | 'feedback'
  | 'feedbacks'
  | 'feedbacksConnection'
  | 'company'
  | 'companies'
  | 'companiesConnection'


type QueryFileArgs =
  | 'where'
type QueryFilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationArgs =
  | 'where'
type QueryLocationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLocationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeoArgs =
  | 'where'
type QueryGeosArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGeosConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInfluencerArgs =
  | 'where'
type QueryInfluencersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInfluencersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediaKitArgs =
  | 'where'
type QueryMediaKitsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMediaKitsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInterestArgs =
  | 'where'
type QueryInterestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInterestsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryJobsArgs =
  | 'where'
type QueryJobsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryJobsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySocialArgs =
  | 'where'
type QuerySocialsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySocialsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInstagramArgs =
  | 'where'
type QueryInstagramsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInstagramsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTwitterArgs =
  | 'where'
type QueryTwittersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTwittersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryYoutubeArgs =
  | 'where'
type QueryYoutubesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryYoutubesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbackArgs =
  | 'where'
type QueryFeedbacksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFeedbacksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyArgs =
  | 'where'
type QueryCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  file: {
    type: 'File'
    args: Record<QueryFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  files: {
    type: 'File'
    args: Record<QueryFilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File[]> | prisma.File[]
  }
  filesConnection: {
    type: 'FileConnection'
    args: Record<QueryFilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileConnection> | prisma.FileConnection
  }
  location: {
    type: 'Location'
    args: Record<QueryLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  locations: {
    type: 'Location'
    args: Record<QueryLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationWhereInput | null, orderBy?: prisma.LocationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location[]> | prisma.Location[]
  }
  locationsConnection: {
    type: 'LocationConnection'
    args: Record<QueryLocationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LocationWhereInput | null, orderBy?: prisma.LocationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationConnection> | prisma.LocationConnection
  }
  geo: {
    type: 'Geo'
    args: Record<QueryGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GeoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo | null> | prisma.Geo | null
  }
  geos: {
    type: 'Geo'
    args: Record<QueryGeosArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeoWhereInput | null, orderBy?: prisma.GeoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo[]> | prisma.Geo[]
  }
  geosConnection: {
    type: 'GeoConnection'
    args: Record<QueryGeosConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GeoWhereInput | null, orderBy?: prisma.GeoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeoConnection> | prisma.GeoConnection
  }
  influencer: {
    type: 'Influencer'
    args: Record<QueryInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InfluencerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  influencers: {
    type: 'Influencer'
    args: Record<QueryInfluencersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InfluencerWhereInput | null, orderBy?: prisma.InfluencerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer[]> | prisma.Influencer[]
  }
  influencersConnection: {
    type: 'InfluencerConnection'
    args: Record<QueryInfluencersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InfluencerWhereInput | null, orderBy?: prisma.InfluencerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InfluencerConnection> | prisma.InfluencerConnection
  }
  mediaKit: {
    type: 'MediaKit'
    args: Record<QueryMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MediaKitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit | null> | prisma.MediaKit | null
  }
  mediaKits: {
    type: 'MediaKit'
    args: Record<QueryMediaKitsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaKitWhereInput | null, orderBy?: prisma.MediaKitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit[]> | prisma.MediaKit[]
  }
  mediaKitsConnection: {
    type: 'MediaKitConnection'
    args: Record<QueryMediaKitsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MediaKitWhereInput | null, orderBy?: prisma.MediaKitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKitConnection> | prisma.MediaKitConnection
  }
  interest: {
    type: 'Interest'
    args: Record<QueryInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InterestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest | null> | prisma.Interest | null
  }
  interests: {
    type: 'Interest'
    args: Record<QueryInterestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InterestWhereInput | null, orderBy?: prisma.InterestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest[]> | prisma.Interest[]
  }
  interestsConnection: {
    type: 'InterestConnection'
    args: Record<QueryInterestsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InterestWhereInput | null, orderBy?: prisma.InterestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InterestConnection> | prisma.InterestConnection
  }
  jobs: {
    type: 'Jobs'
    args: Record<QueryJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: JobsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs | null> | prisma.Jobs | null
  }
  jobses: {
    type: 'Jobs'
    args: Record<QueryJobsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: JobsWhereInput | null, orderBy?: prisma.JobsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs[]> | prisma.Jobs[]
  }
  jobsesConnection: {
    type: 'JobsConnection'
    args: Record<QueryJobsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: JobsWhereInput | null, orderBy?: prisma.JobsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JobsConnection> | prisma.JobsConnection
  }
  social: {
    type: 'Social'
    args: Record<QuerySocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SocialWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social | null> | prisma.Social | null
  }
  socials: {
    type: 'Social'
    args: Record<QuerySocialsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SocialWhereInput | null, orderBy?: prisma.SocialOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social[]> | prisma.Social[]
  }
  socialsConnection: {
    type: 'SocialConnection'
    args: Record<QuerySocialsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SocialWhereInput | null, orderBy?: prisma.SocialOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SocialConnection> | prisma.SocialConnection
  }
  instagram: {
    type: 'Instagram'
    args: Record<QueryInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InstagramWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram | null> | prisma.Instagram | null
  }
  instagrams: {
    type: 'Instagram'
    args: Record<QueryInstagramsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InstagramWhereInput | null, orderBy?: prisma.InstagramOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram[]> | prisma.Instagram[]
  }
  instagramsConnection: {
    type: 'InstagramConnection'
    args: Record<QueryInstagramsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InstagramWhereInput | null, orderBy?: prisma.InstagramOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstagramConnection> | prisma.InstagramConnection
  }
  twitter: {
    type: 'Twitter'
    args: Record<QueryTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TwitterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter | null> | prisma.Twitter | null
  }
  twitters: {
    type: 'Twitter'
    args: Record<QueryTwittersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TwitterWhereInput | null, orderBy?: prisma.TwitterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter[]> | prisma.Twitter[]
  }
  twittersConnection: {
    type: 'TwitterConnection'
    args: Record<QueryTwittersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TwitterWhereInput | null, orderBy?: prisma.TwitterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterConnection> | prisma.TwitterConnection
  }
  youtube: {
    type: 'Youtube'
    args: Record<QueryYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: YoutubeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube | null> | prisma.Youtube | null
  }
  youtubes: {
    type: 'Youtube'
    args: Record<QueryYoutubesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: YoutubeWhereInput | null, orderBy?: prisma.YoutubeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube[]> | prisma.Youtube[]
  }
  youtubesConnection: {
    type: 'YoutubeConnection'
    args: Record<QueryYoutubesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: YoutubeWhereInput | null, orderBy?: prisma.YoutubeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.YoutubeConnection> | prisma.YoutubeConnection
  }
  feedback: {
    type: 'Feedback'
    args: Record<QueryFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FeedbackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback | null> | prisma.Feedback | null
  }
  feedbacks: {
    type: 'Feedback'
    args: Record<QueryFeedbacksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackWhereInput | null, orderBy?: prisma.FeedbackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback[]> | prisma.Feedback[]
  }
  feedbacksConnection: {
    type: 'FeedbackConnection'
    args: Record<QueryFeedbacksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FeedbackWhereInput | null, orderBy?: prisma.FeedbackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackConnection> | prisma.FeedbackConnection
  }
  company: {
    type: 'Company'
    args: Record<QueryCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  companies: {
    type: 'Company'
    args: Record<QueryCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company[]> | prisma.Company[]
  }
  companiesConnection: {
    type: 'CompanyConnection'
    args: Record<QueryCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyConnection> | prisma.CompanyConnection
  }
}
  

// Types for File

type FileObject =
  | FileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'secret', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'public_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'width', args?: [] | false, alias?: string  } 
  | { name: 'height', args?: [] | false, alias?: string  } 
  | { name: 'resource_type', args?: [] | false, alias?: string  } 
  | { name: 'contentType', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 
  | { name: 'mediaKit', args?: FileMediaKitArgs[] | false, alias?: string  } 

type FileFields =
  | 'id'
  | 'secret'
  | 'url'
  | 'public_id'
  | 'name'
  | 'size'
  | 'width'
  | 'height'
  | 'resource_type'
  | 'contentType'
  | 'createdAt'
  | 'updatedAt'
  | 'influencer'
  | 'mediaKit'


type FileMediaKitArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface FileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  secret: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  public_id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  width: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  height: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resource_type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  contentType: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"File">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer> | prisma.Influencer
  }
  mediaKit: {
    type: 'MediaKit'
    args: Record<FileMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"File">,
      args: { where?: MediaKitWhereInput | null, orderBy?: prisma.MediaKitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit[]> | prisma.MediaKit[]
  }
}
  

// Types for Influencer

type InfluencerObject =
  | InfluencerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'verified', args?: [] | false, alias?: string  } 
  | { name: 'specialty', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'mediaKit', args?: InfluencerMediaKitArgs[] | false, alias?: string  } 
  | { name: 'files', args?: InfluencerFilesArgs[] | false, alias?: string  } 
  | { name: 'social', args?: [] | false, alias?: string  } 

type InfluencerFields =
  | 'id'
  | 'email'
  | 'handle'
  | 'avatar'
  | 'name'
  | 'bio'
  | 'updatedAt'
  | 'createdAt'
  | 'password'
  | 'verified'
  | 'specialty'
  | 'location'
  | 'mediaKit'
  | 'files'
  | 'social'


type InfluencerMediaKitArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type InfluencerFilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface InfluencerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  verified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  specialty: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Influencer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  mediaKit: {
    type: 'MediaKit'
    args: Record<InfluencerMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Influencer">,
      args: { where?: MediaKitWhereInput | null, orderBy?: prisma.MediaKitOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit[]> | prisma.MediaKit[]
  }
  files: {
    type: 'File'
    args: Record<InfluencerFilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Influencer">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File[]> | prisma.File[]
  }
  social: {
    type: 'Social'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Influencer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social | null> | prisma.Social | null
  }
}
  

// Types for Location

type LocationObject =
  | LocationFields
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'geo', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 

type LocationFields =
  | 'updatedAt'
  | 'createdAt'
  | 'id'
  | 'name'
  | 'geo'
  | 'influencer'



  

export interface LocationFieldDetails {
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  geo: {
    type: 'Geo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Location">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo | null> | prisma.Geo | null
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Location">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
}
  

// Types for Geo

type GeoObject =
  | GeoFields
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type GeoFields =
  | 'lat'
  | 'lng'
  | 'id'
  | 'location'
  | 'updatedAt'
  | 'createdAt'



  

export interface GeoFieldDetails {
  lat: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lng: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  location: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Geo">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MediaKit

type MediaKitObject =
  | MediaKitFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 
  | { name: 'files', args?: MediaKitFilesArgs[] | false, alias?: string  } 
  | { name: 'interests', args?: MediaKitInterestsArgs[] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type MediaKitFields =
  | 'id'
  | 'influencer'
  | 'files'
  | 'interests'
  | 'status'
  | 'updatedAt'
  | 'createdAt'


type MediaKitFilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type MediaKitInterestsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface MediaKitFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaKit">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  files: {
    type: 'File'
    args: Record<MediaKitFilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKit">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File[]> | prisma.File[]
  }
  interests: {
    type: 'Interest'
    args: Record<MediaKitInterestsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKit">,
      args: { where?: InterestWhereInput | null, orderBy?: prisma.InterestOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest[]> | prisma.Interest[]
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKit">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Interest

type InterestObject =
  | InterestFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 

type InterestFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'tag'
  | 'influencer'



  

export interface InterestFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Interest">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
}
  

// Types for Social

type SocialObject =
  | SocialFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'instagram', args?: [] | false, alias?: string  } 
  | { name: 'youtube', args?: [] | false, alias?: string  } 
  | { name: 'twitter', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type SocialFields =
  | 'id'
  | 'status'
  | 'instagram'
  | 'youtube'
  | 'twitter'
  | 'influencer'
  | 'updatedAt'
  | 'createdAt'



  

export interface SocialFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Social">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  instagram: {
    type: 'Instagram'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Social">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram | null> | prisma.Instagram | null
  }
  youtube: {
    type: 'Youtube'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Social">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube | null> | prisma.Youtube | null
  }
  twitter: {
    type: 'Twitter'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Social">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter | null> | prisma.Twitter | null
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Social">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Instagram

type InstagramObject =
  | InstagramFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type InstagramFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'handle'
  | 'followers'
  | 'analytics'
  | 'link'



  

export interface InstagramFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Youtube

type YoutubeObject =
  | YoutubeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type YoutubeFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'followers'
  | 'analytics'
  | 'handle'
  | 'link'



  

export interface YoutubeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Twitter

type TwitterObject =
  | TwitterFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type TwitterFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'analytics'
  | 'followers'
  | 'handle'
  | 'link'



  

export interface TwitterFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for FileConnection

type FileConnectionObject =
  | FileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileEdge[]> | prisma.FileEdge[]
  }
  aggregate: {
    type: 'AggregateFile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFile> | prisma.AggregateFile
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for FileEdge

type FileEdgeObject =
  | FileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FileEdgeFieldDetails {
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFile

type AggregateFileObject =
  | AggregateFileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFileFields =
  | 'count'



  

export interface AggregateFileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LocationConnection

type LocationConnectionObject =
  | LocationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LocationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LocationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LocationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationEdge[]> | prisma.LocationEdge[]
  }
  aggregate: {
    type: 'AggregateLocation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLocation> | prisma.AggregateLocation
  }
}
  

// Types for LocationEdge

type LocationEdgeObject =
  | LocationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LocationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LocationEdgeFieldDetails {
  node: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLocation

type AggregateLocationObject =
  | AggregateLocationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLocationFields =
  | 'count'



  

export interface AggregateLocationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GeoConnection

type GeoConnectionObject =
  | GeoConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GeoConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GeoConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GeoEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GeoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeoEdge[]> | prisma.GeoEdge[]
  }
  aggregate: {
    type: 'AggregateGeo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGeo> | prisma.AggregateGeo
  }
}
  

// Types for GeoEdge

type GeoEdgeObject =
  | GeoEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GeoEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GeoEdgeFieldDetails {
  node: {
    type: 'Geo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeoEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo> | prisma.Geo
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGeo

type AggregateGeoObject =
  | AggregateGeoFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGeoFields =
  | 'count'



  

export interface AggregateGeoFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InfluencerConnection

type InfluencerConnectionObject =
  | InfluencerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InfluencerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InfluencerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InfluencerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InfluencerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InfluencerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InfluencerEdge[]> | prisma.InfluencerEdge[]
  }
  aggregate: {
    type: 'AggregateInfluencer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InfluencerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInfluencer> | prisma.AggregateInfluencer
  }
}
  

// Types for InfluencerEdge

type InfluencerEdgeObject =
  | InfluencerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InfluencerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InfluencerEdgeFieldDetails {
  node: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InfluencerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer> | prisma.Influencer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInfluencer

type AggregateInfluencerObject =
  | AggregateInfluencerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInfluencerFields =
  | 'count'



  

export interface AggregateInfluencerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MediaKitConnection

type MediaKitConnectionObject =
  | MediaKitConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MediaKitConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MediaKitConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MediaKitEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKitEdge[]> | prisma.MediaKitEdge[]
  }
  aggregate: {
    type: 'AggregateMediaKit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMediaKit> | prisma.AggregateMediaKit
  }
}
  

// Types for MediaKitEdge

type MediaKitEdgeObject =
  | MediaKitEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MediaKitEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MediaKitEdgeFieldDetails {
  node: {
    type: 'MediaKit'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit> | prisma.MediaKit
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMediaKit

type AggregateMediaKitObject =
  | AggregateMediaKitFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMediaKitFields =
  | 'count'



  

export interface AggregateMediaKitFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InterestConnection

type InterestConnectionObject =
  | InterestConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InterestConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InterestConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InterestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InterestEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InterestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InterestEdge[]> | prisma.InterestEdge[]
  }
  aggregate: {
    type: 'AggregateInterest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InterestConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInterest> | prisma.AggregateInterest
  }
}
  

// Types for InterestEdge

type InterestEdgeObject =
  | InterestEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InterestEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InterestEdgeFieldDetails {
  node: {
    type: 'Interest'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InterestEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest> | prisma.Interest
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInterest

type AggregateInterestObject =
  | AggregateInterestFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInterestFields =
  | 'count'



  

export interface AggregateInterestFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Jobs

type JobsObject =
  | JobsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'cost', args?: [] | false, alias?: string  } 
  | { name: 'accepted', args?: [] | false, alias?: string  } 

type JobsFields =
  | 'id'
  | 'status'
  | 'company'
  | 'updatedAt'
  | 'createdAt'
  | 'cost'
  | 'accepted'



  

export interface JobsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Jobs">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Jobs">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cost: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  accepted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Company

type CompanyObject =
  | CompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'hires', args?: [] | false, alias?: string  } 
  | { name: 'jobs', args?: CompanyJobsArgs[] | false, alias?: string  } 
  | { name: 'feedback', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 

type CompanyFields =
  | 'id'
  | 'status'
  | 'hires'
  | 'jobs'
  | 'feedback'
  | 'updatedAt'
  | 'createdAt'
  | 'name'
  | 'location'


type CompanyJobsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  hires: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  jobs: {
    type: 'Jobs'
    args: Record<CompanyJobsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: { where?: JobsWhereInput | null, orderBy?: prisma.JobsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs[]> | prisma.Jobs[]
  }
  feedback: {
    type: 'Feedback'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback | null> | prisma.Feedback | null
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Feedback

type FeedbackObject =
  | FeedbackFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'influencer', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type FeedbackFields =
  | 'id'
  | 'status'
  | 'influencer'
  | 'company'
  | 'updatedAt'
  | 'createdAt'
  | 'comment'



  

export interface FeedbackFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Feedback">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  influencer: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Feedback">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Feedback">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for JobsConnection

type JobsConnectionObject =
  | JobsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type JobsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface JobsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JobsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'JobsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"JobsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JobsEdge[]> | prisma.JobsEdge[]
  }
  aggregate: {
    type: 'AggregateJobs'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JobsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateJobs> | prisma.AggregateJobs
  }
}
  

// Types for JobsEdge

type JobsEdgeObject =
  | JobsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type JobsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface JobsEdgeFieldDetails {
  node: {
    type: 'Jobs'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JobsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs> | prisma.Jobs
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateJobs

type AggregateJobsObject =
  | AggregateJobsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateJobsFields =
  | 'count'



  

export interface AggregateJobsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SocialConnection

type SocialConnectionObject =
  | SocialConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SocialConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SocialConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SocialConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SocialEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SocialConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SocialEdge[]> | prisma.SocialEdge[]
  }
  aggregate: {
    type: 'AggregateSocial'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SocialConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSocial> | prisma.AggregateSocial
  }
}
  

// Types for SocialEdge

type SocialEdgeObject =
  | SocialEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SocialEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SocialEdgeFieldDetails {
  node: {
    type: 'Social'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SocialEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social> | prisma.Social
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSocial

type AggregateSocialObject =
  | AggregateSocialFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSocialFields =
  | 'count'



  

export interface AggregateSocialFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InstagramConnection

type InstagramConnectionObject =
  | InstagramConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InstagramConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InstagramConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstagramConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InstagramEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InstagramConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstagramEdge[]> | prisma.InstagramEdge[]
  }
  aggregate: {
    type: 'AggregateInstagram'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstagramConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInstagram> | prisma.AggregateInstagram
  }
}
  

// Types for InstagramEdge

type InstagramEdgeObject =
  | InstagramEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InstagramEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InstagramEdgeFieldDetails {
  node: {
    type: 'Instagram'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstagramEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram> | prisma.Instagram
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInstagram

type AggregateInstagramObject =
  | AggregateInstagramFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInstagramFields =
  | 'count'



  

export interface AggregateInstagramFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TwitterConnection

type TwitterConnectionObject =
  | TwitterConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TwitterConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TwitterConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TwitterEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterEdge[]> | prisma.TwitterEdge[]
  }
  aggregate: {
    type: 'AggregateTwitter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTwitter> | prisma.AggregateTwitter
  }
}
  

// Types for TwitterEdge

type TwitterEdgeObject =
  | TwitterEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TwitterEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TwitterEdgeFieldDetails {
  node: {
    type: 'Twitter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter> | prisma.Twitter
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTwitter

type AggregateTwitterObject =
  | AggregateTwitterFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTwitterFields =
  | 'count'



  

export interface AggregateTwitterFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for YoutubeConnection

type YoutubeConnectionObject =
  | YoutubeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type YoutubeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface YoutubeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"YoutubeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'YoutubeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"YoutubeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.YoutubeEdge[]> | prisma.YoutubeEdge[]
  }
  aggregate: {
    type: 'AggregateYoutube'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"YoutubeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateYoutube> | prisma.AggregateYoutube
  }
}
  

// Types for YoutubeEdge

type YoutubeEdgeObject =
  | YoutubeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type YoutubeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface YoutubeEdgeFieldDetails {
  node: {
    type: 'Youtube'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"YoutubeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube> | prisma.Youtube
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateYoutube

type AggregateYoutubeObject =
  | AggregateYoutubeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateYoutubeFields =
  | 'count'



  

export interface AggregateYoutubeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FeedbackConnection

type FeedbackConnectionObject =
  | FeedbackConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FeedbackConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FeedbackConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FeedbackEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackEdge[]> | prisma.FeedbackEdge[]
  }
  aggregate: {
    type: 'AggregateFeedback'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFeedback> | prisma.AggregateFeedback
  }
}
  

// Types for FeedbackEdge

type FeedbackEdgeObject =
  | FeedbackEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FeedbackEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FeedbackEdgeFieldDetails {
  node: {
    type: 'Feedback'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback> | prisma.Feedback
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFeedback

type AggregateFeedbackObject =
  | AggregateFeedbackFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFeedbackFields =
  | 'count'



  

export interface AggregateFeedbackFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyConnection

type CompanyConnectionObject =
  | CompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyEdge[]> | prisma.CompanyEdge[]
  }
  aggregate: {
    type: 'AggregateCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCompany> | prisma.AggregateCompany
  }
}
  

// Types for CompanyEdge

type CompanyEdgeObject =
  | CompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CompanyEdgeFieldDetails {
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCompany

type AggregateCompanyObject =
  | AggregateCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCompanyFields =
  | 'count'



  

export interface AggregateCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createFile', args?: MutationCreateFileArgs[] | false, alias?: string  } 
  | { name: 'updateFile', args?: MutationUpdateFileArgs[] | false, alias?: string  } 
  | { name: 'updateManyFiles', args?: MutationUpdateManyFilesArgs[] | false, alias?: string  } 
  | { name: 'upsertFile', args?: MutationUpsertFileArgs[] | false, alias?: string  } 
  | { name: 'deleteFile', args?: MutationDeleteFileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFiles', args?: MutationDeleteManyFilesArgs[] | false, alias?: string  } 
  | { name: 'createLocation', args?: MutationCreateLocationArgs[] | false, alias?: string  } 
  | { name: 'updateLocation', args?: MutationUpdateLocationArgs[] | false, alias?: string  } 
  | { name: 'updateManyLocations', args?: MutationUpdateManyLocationsArgs[] | false, alias?: string  } 
  | { name: 'upsertLocation', args?: MutationUpsertLocationArgs[] | false, alias?: string  } 
  | { name: 'deleteLocation', args?: MutationDeleteLocationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLocations', args?: MutationDeleteManyLocationsArgs[] | false, alias?: string  } 
  | { name: 'createGeo', args?: MutationCreateGeoArgs[] | false, alias?: string  } 
  | { name: 'updateGeo', args?: MutationUpdateGeoArgs[] | false, alias?: string  } 
  | { name: 'updateManyGeos', args?: MutationUpdateManyGeosArgs[] | false, alias?: string  } 
  | { name: 'upsertGeo', args?: MutationUpsertGeoArgs[] | false, alias?: string  } 
  | { name: 'deleteGeo', args?: MutationDeleteGeoArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGeos', args?: MutationDeleteManyGeosArgs[] | false, alias?: string  } 
  | { name: 'createInfluencer', args?: MutationCreateInfluencerArgs[] | false, alias?: string  } 
  | { name: 'updateInfluencer', args?: MutationUpdateInfluencerArgs[] | false, alias?: string  } 
  | { name: 'updateManyInfluencers', args?: MutationUpdateManyInfluencersArgs[] | false, alias?: string  } 
  | { name: 'upsertInfluencer', args?: MutationUpsertInfluencerArgs[] | false, alias?: string  } 
  | { name: 'deleteInfluencer', args?: MutationDeleteInfluencerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInfluencers', args?: MutationDeleteManyInfluencersArgs[] | false, alias?: string  } 
  | { name: 'createMediaKit', args?: MutationCreateMediaKitArgs[] | false, alias?: string  } 
  | { name: 'updateMediaKit', args?: MutationUpdateMediaKitArgs[] | false, alias?: string  } 
  | { name: 'updateManyMediaKits', args?: MutationUpdateManyMediaKitsArgs[] | false, alias?: string  } 
  | { name: 'upsertMediaKit', args?: MutationUpsertMediaKitArgs[] | false, alias?: string  } 
  | { name: 'deleteMediaKit', args?: MutationDeleteMediaKitArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMediaKits', args?: MutationDeleteManyMediaKitsArgs[] | false, alias?: string  } 
  | { name: 'createInterest', args?: MutationCreateInterestArgs[] | false, alias?: string  } 
  | { name: 'updateInterest', args?: MutationUpdateInterestArgs[] | false, alias?: string  } 
  | { name: 'updateManyInterests', args?: MutationUpdateManyInterestsArgs[] | false, alias?: string  } 
  | { name: 'upsertInterest', args?: MutationUpsertInterestArgs[] | false, alias?: string  } 
  | { name: 'deleteInterest', args?: MutationDeleteInterestArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInterests', args?: MutationDeleteManyInterestsArgs[] | false, alias?: string  } 
  | { name: 'createJobs', args?: MutationCreateJobsArgs[] | false, alias?: string  } 
  | { name: 'updateJobs', args?: MutationUpdateJobsArgs[] | false, alias?: string  } 
  | { name: 'updateManyJobses', args?: MutationUpdateManyJobsesArgs[] | false, alias?: string  } 
  | { name: 'upsertJobs', args?: MutationUpsertJobsArgs[] | false, alias?: string  } 
  | { name: 'deleteJobs', args?: MutationDeleteJobsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyJobses', args?: MutationDeleteManyJobsesArgs[] | false, alias?: string  } 
  | { name: 'createSocial', args?: MutationCreateSocialArgs[] | false, alias?: string  } 
  | { name: 'updateSocial', args?: MutationUpdateSocialArgs[] | false, alias?: string  } 
  | { name: 'updateManySocials', args?: MutationUpdateManySocialsArgs[] | false, alias?: string  } 
  | { name: 'upsertSocial', args?: MutationUpsertSocialArgs[] | false, alias?: string  } 
  | { name: 'deleteSocial', args?: MutationDeleteSocialArgs[] | false, alias?: string  } 
  | { name: 'deleteManySocials', args?: MutationDeleteManySocialsArgs[] | false, alias?: string  } 
  | { name: 'createInstagram', args?: MutationCreateInstagramArgs[] | false, alias?: string  } 
  | { name: 'updateInstagram', args?: MutationUpdateInstagramArgs[] | false, alias?: string  } 
  | { name: 'updateManyInstagrams', args?: MutationUpdateManyInstagramsArgs[] | false, alias?: string  } 
  | { name: 'upsertInstagram', args?: MutationUpsertInstagramArgs[] | false, alias?: string  } 
  | { name: 'deleteInstagram', args?: MutationDeleteInstagramArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInstagrams', args?: MutationDeleteManyInstagramsArgs[] | false, alias?: string  } 
  | { name: 'createTwitter', args?: MutationCreateTwitterArgs[] | false, alias?: string  } 
  | { name: 'updateTwitter', args?: MutationUpdateTwitterArgs[] | false, alias?: string  } 
  | { name: 'updateManyTwitters', args?: MutationUpdateManyTwittersArgs[] | false, alias?: string  } 
  | { name: 'upsertTwitter', args?: MutationUpsertTwitterArgs[] | false, alias?: string  } 
  | { name: 'deleteTwitter', args?: MutationDeleteTwitterArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTwitters', args?: MutationDeleteManyTwittersArgs[] | false, alias?: string  } 
  | { name: 'createYoutube', args?: MutationCreateYoutubeArgs[] | false, alias?: string  } 
  | { name: 'updateYoutube', args?: MutationUpdateYoutubeArgs[] | false, alias?: string  } 
  | { name: 'updateManyYoutubes', args?: MutationUpdateManyYoutubesArgs[] | false, alias?: string  } 
  | { name: 'upsertYoutube', args?: MutationUpsertYoutubeArgs[] | false, alias?: string  } 
  | { name: 'deleteYoutube', args?: MutationDeleteYoutubeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyYoutubes', args?: MutationDeleteManyYoutubesArgs[] | false, alias?: string  } 
  | { name: 'createFeedback', args?: MutationCreateFeedbackArgs[] | false, alias?: string  } 
  | { name: 'updateFeedback', args?: MutationUpdateFeedbackArgs[] | false, alias?: string  } 
  | { name: 'updateManyFeedbacks', args?: MutationUpdateManyFeedbacksArgs[] | false, alias?: string  } 
  | { name: 'upsertFeedback', args?: MutationUpsertFeedbackArgs[] | false, alias?: string  } 
  | { name: 'deleteFeedback', args?: MutationDeleteFeedbackArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFeedbacks', args?: MutationDeleteManyFeedbacksArgs[] | false, alias?: string  } 
  | { name: 'createCompany', args?: MutationCreateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateCompany', args?: MutationUpdateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyCompanies', args?: MutationUpdateManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertCompany', args?: MutationUpsertCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteCompany', args?: MutationDeleteCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCompanies', args?: MutationDeleteManyCompaniesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createFile'
  | 'updateFile'
  | 'updateManyFiles'
  | 'upsertFile'
  | 'deleteFile'
  | 'deleteManyFiles'
  | 'createLocation'
  | 'updateLocation'
  | 'updateManyLocations'
  | 'upsertLocation'
  | 'deleteLocation'
  | 'deleteManyLocations'
  | 'createGeo'
  | 'updateGeo'
  | 'updateManyGeos'
  | 'upsertGeo'
  | 'deleteGeo'
  | 'deleteManyGeos'
  | 'createInfluencer'
  | 'updateInfluencer'
  | 'updateManyInfluencers'
  | 'upsertInfluencer'
  | 'deleteInfluencer'
  | 'deleteManyInfluencers'
  | 'createMediaKit'
  | 'updateMediaKit'
  | 'updateManyMediaKits'
  | 'upsertMediaKit'
  | 'deleteMediaKit'
  | 'deleteManyMediaKits'
  | 'createInterest'
  | 'updateInterest'
  | 'updateManyInterests'
  | 'upsertInterest'
  | 'deleteInterest'
  | 'deleteManyInterests'
  | 'createJobs'
  | 'updateJobs'
  | 'updateManyJobses'
  | 'upsertJobs'
  | 'deleteJobs'
  | 'deleteManyJobses'
  | 'createSocial'
  | 'updateSocial'
  | 'updateManySocials'
  | 'upsertSocial'
  | 'deleteSocial'
  | 'deleteManySocials'
  | 'createInstagram'
  | 'updateInstagram'
  | 'updateManyInstagrams'
  | 'upsertInstagram'
  | 'deleteInstagram'
  | 'deleteManyInstagrams'
  | 'createTwitter'
  | 'updateTwitter'
  | 'updateManyTwitters'
  | 'upsertTwitter'
  | 'deleteTwitter'
  | 'deleteManyTwitters'
  | 'createYoutube'
  | 'updateYoutube'
  | 'updateManyYoutubes'
  | 'upsertYoutube'
  | 'deleteYoutube'
  | 'deleteManyYoutubes'
  | 'createFeedback'
  | 'updateFeedback'
  | 'updateManyFeedbacks'
  | 'upsertFeedback'
  | 'deleteFeedback'
  | 'deleteManyFeedbacks'
  | 'createCompany'
  | 'updateCompany'
  | 'updateManyCompanies'
  | 'upsertCompany'
  | 'deleteCompany'
  | 'deleteManyCompanies'


type MutationCreateFileArgs =
  | 'data'
type MutationUpdateFileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFilesArgs =
  | 'data'
  | 'where'
type MutationUpsertFileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFileArgs =
  | 'where'
type MutationDeleteManyFilesArgs =
  | 'where'
type MutationCreateLocationArgs =
  | 'data'
type MutationUpdateLocationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLocationsArgs =
  | 'data'
  | 'where'
type MutationUpsertLocationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLocationArgs =
  | 'where'
type MutationDeleteManyLocationsArgs =
  | 'where'
type MutationCreateGeoArgs =
  | 'data'
type MutationUpdateGeoArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGeosArgs =
  | 'data'
  | 'where'
type MutationUpsertGeoArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGeoArgs =
  | 'where'
type MutationDeleteManyGeosArgs =
  | 'where'
type MutationCreateInfluencerArgs =
  | 'data'
type MutationUpdateInfluencerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInfluencersArgs =
  | 'data'
  | 'where'
type MutationUpsertInfluencerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInfluencerArgs =
  | 'where'
type MutationDeleteManyInfluencersArgs =
  | 'where'
type MutationCreateMediaKitArgs =
  | 'data'
type MutationUpdateMediaKitArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMediaKitsArgs =
  | 'data'
  | 'where'
type MutationUpsertMediaKitArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMediaKitArgs =
  | 'where'
type MutationDeleteManyMediaKitsArgs =
  | 'where'
type MutationCreateInterestArgs =
  | 'data'
type MutationUpdateInterestArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInterestsArgs =
  | 'data'
  | 'where'
type MutationUpsertInterestArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInterestArgs =
  | 'where'
type MutationDeleteManyInterestsArgs =
  | 'where'
type MutationCreateJobsArgs =
  | 'data'
type MutationUpdateJobsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyJobsesArgs =
  | 'data'
  | 'where'
type MutationUpsertJobsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteJobsArgs =
  | 'where'
type MutationDeleteManyJobsesArgs =
  | 'where'
type MutationCreateSocialArgs =
  | 'data'
type MutationUpdateSocialArgs =
  | 'data'
  | 'where'
type MutationUpdateManySocialsArgs =
  | 'data'
  | 'where'
type MutationUpsertSocialArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSocialArgs =
  | 'where'
type MutationDeleteManySocialsArgs =
  | 'where'
type MutationCreateInstagramArgs =
  | 'data'
type MutationUpdateInstagramArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInstagramsArgs =
  | 'data'
  | 'where'
type MutationUpsertInstagramArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInstagramArgs =
  | 'where'
type MutationDeleteManyInstagramsArgs =
  | 'where'
type MutationCreateTwitterArgs =
  | 'data'
type MutationUpdateTwitterArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTwittersArgs =
  | 'data'
  | 'where'
type MutationUpsertTwitterArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTwitterArgs =
  | 'where'
type MutationDeleteManyTwittersArgs =
  | 'where'
type MutationCreateYoutubeArgs =
  | 'data'
type MutationUpdateYoutubeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyYoutubesArgs =
  | 'data'
  | 'where'
type MutationUpsertYoutubeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteYoutubeArgs =
  | 'where'
type MutationDeleteManyYoutubesArgs =
  | 'where'
type MutationCreateFeedbackArgs =
  | 'data'
type MutationUpdateFeedbackArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFeedbacksArgs =
  | 'data'
  | 'where'
type MutationUpsertFeedbackArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFeedbackArgs =
  | 'where'
type MutationDeleteManyFeedbacksArgs =
  | 'where'
type MutationCreateCompanyArgs =
  | 'data'
type MutationUpdateCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCompanyArgs =
  | 'where'
type MutationDeleteManyCompaniesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createFile: {
    type: 'File'
    args: Record<MutationCreateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  updateFile: {
    type: 'File'
    args: Record<MutationUpdateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateInput, where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updateManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateManyMutationInput, where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFile: {
    type: 'File'
    args: Record<MutationUpsertFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput, create: FileCreateInput, update: FileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  deleteFile: {
    type: 'File'
    args: Record<MutationDeleteFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  deleteManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLocation: {
    type: 'Location'
    args: Record<MutationCreateLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  updateLocation: {
    type: 'Location'
    args: Record<MutationUpdateLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationUpdateInput, where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  updateManyLocations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LocationUpdateManyMutationInput, where?: LocationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLocation: {
    type: 'Location'
    args: Record<MutationUpsertLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationWhereUniqueInput, create: LocationCreateInput, update: LocationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location> | prisma.Location
  }
  deleteLocation: {
    type: 'Location'
    args: Record<MutationDeleteLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LocationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  deleteManyLocations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLocationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LocationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGeo: {
    type: 'Geo'
    args: Record<MutationCreateGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeoCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo> | prisma.Geo
  }
  updateGeo: {
    type: 'Geo'
    args: Record<MutationUpdateGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeoUpdateInput, where: GeoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo | null> | prisma.Geo | null
  }
  updateManyGeos: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGeosArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GeoUpdateManyMutationInput, where?: GeoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGeo: {
    type: 'Geo'
    args: Record<MutationUpsertGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeoWhereUniqueInput, create: GeoCreateInput, update: GeoUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo> | prisma.Geo
  }
  deleteGeo: {
    type: 'Geo'
    args: Record<MutationDeleteGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GeoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo | null> | prisma.Geo | null
  }
  deleteManyGeos: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGeosArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GeoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInfluencer: {
    type: 'Influencer'
    args: Record<MutationCreateInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InfluencerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer> | prisma.Influencer
  }
  updateInfluencer: {
    type: 'Influencer'
    args: Record<MutationUpdateInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InfluencerUpdateInput, where: InfluencerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  updateManyInfluencers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInfluencersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InfluencerUpdateManyMutationInput, where?: InfluencerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInfluencer: {
    type: 'Influencer'
    args: Record<MutationUpsertInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InfluencerWhereUniqueInput, create: InfluencerCreateInput, update: InfluencerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer> | prisma.Influencer
  }
  deleteInfluencer: {
    type: 'Influencer'
    args: Record<MutationDeleteInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InfluencerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  deleteManyInfluencers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInfluencersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InfluencerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMediaKit: {
    type: 'MediaKit'
    args: Record<MutationCreateMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaKitCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit> | prisma.MediaKit
  }
  updateMediaKit: {
    type: 'MediaKit'
    args: Record<MutationUpdateMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaKitUpdateInput, where: MediaKitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit | null> | prisma.MediaKit | null
  }
  updateManyMediaKits: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMediaKitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MediaKitUpdateManyMutationInput, where?: MediaKitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMediaKit: {
    type: 'MediaKit'
    args: Record<MutationUpsertMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaKitWhereUniqueInput, create: MediaKitCreateInput, update: MediaKitUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit> | prisma.MediaKit
  }
  deleteMediaKit: {
    type: 'MediaKit'
    args: Record<MutationDeleteMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MediaKitWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit | null> | prisma.MediaKit | null
  }
  deleteManyMediaKits: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMediaKitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MediaKitWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInterest: {
    type: 'Interest'
    args: Record<MutationCreateInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InterestCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest> | prisma.Interest
  }
  updateInterest: {
    type: 'Interest'
    args: Record<MutationUpdateInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InterestUpdateInput, where: InterestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest | null> | prisma.Interest | null
  }
  updateManyInterests: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInterestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InterestUpdateManyMutationInput, where?: InterestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInterest: {
    type: 'Interest'
    args: Record<MutationUpsertInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InterestWhereUniqueInput, create: InterestCreateInput, update: InterestUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest> | prisma.Interest
  }
  deleteInterest: {
    type: 'Interest'
    args: Record<MutationDeleteInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InterestWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest | null> | prisma.Interest | null
  }
  deleteManyInterests: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInterestsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InterestWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createJobs: {
    type: 'Jobs'
    args: Record<MutationCreateJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JobsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs> | prisma.Jobs
  }
  updateJobs: {
    type: 'Jobs'
    args: Record<MutationUpdateJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JobsUpdateInput, where: JobsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs | null> | prisma.Jobs | null
  }
  updateManyJobses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyJobsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JobsUpdateManyMutationInput, where?: JobsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertJobs: {
    type: 'Jobs'
    args: Record<MutationUpsertJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: JobsWhereUniqueInput, create: JobsCreateInput, update: JobsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs> | prisma.Jobs
  }
  deleteJobs: {
    type: 'Jobs'
    args: Record<MutationDeleteJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: JobsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs | null> | prisma.Jobs | null
  }
  deleteManyJobses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyJobsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: JobsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSocial: {
    type: 'Social'
    args: Record<MutationCreateSocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SocialCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social> | prisma.Social
  }
  updateSocial: {
    type: 'Social'
    args: Record<MutationUpdateSocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SocialUpdateInput, where: SocialWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social | null> | prisma.Social | null
  }
  updateManySocials: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySocialsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SocialUpdateManyMutationInput, where?: SocialWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSocial: {
    type: 'Social'
    args: Record<MutationUpsertSocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SocialWhereUniqueInput, create: SocialCreateInput, update: SocialUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social> | prisma.Social
  }
  deleteSocial: {
    type: 'Social'
    args: Record<MutationDeleteSocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SocialWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social | null> | prisma.Social | null
  }
  deleteManySocials: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySocialsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SocialWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInstagram: {
    type: 'Instagram'
    args: Record<MutationCreateInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstagramCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram> | prisma.Instagram
  }
  updateInstagram: {
    type: 'Instagram'
    args: Record<MutationUpdateInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstagramUpdateInput, where: InstagramWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram | null> | prisma.Instagram | null
  }
  updateManyInstagrams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInstagramsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InstagramUpdateManyMutationInput, where?: InstagramWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInstagram: {
    type: 'Instagram'
    args: Record<MutationUpsertInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InstagramWhereUniqueInput, create: InstagramCreateInput, update: InstagramUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram> | prisma.Instagram
  }
  deleteInstagram: {
    type: 'Instagram'
    args: Record<MutationDeleteInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InstagramWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram | null> | prisma.Instagram | null
  }
  deleteManyInstagrams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInstagramsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InstagramWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTwitter: {
    type: 'Twitter'
    args: Record<MutationCreateTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter> | prisma.Twitter
  }
  updateTwitter: {
    type: 'Twitter'
    args: Record<MutationUpdateTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterUpdateInput, where: TwitterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter | null> | prisma.Twitter | null
  }
  updateManyTwitters: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTwittersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TwitterUpdateManyMutationInput, where?: TwitterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTwitter: {
    type: 'Twitter'
    args: Record<MutationUpsertTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TwitterWhereUniqueInput, create: TwitterCreateInput, update: TwitterUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter> | prisma.Twitter
  }
  deleteTwitter: {
    type: 'Twitter'
    args: Record<MutationDeleteTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TwitterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter | null> | prisma.Twitter | null
  }
  deleteManyTwitters: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTwittersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TwitterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createYoutube: {
    type: 'Youtube'
    args: Record<MutationCreateYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: YoutubeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube> | prisma.Youtube
  }
  updateYoutube: {
    type: 'Youtube'
    args: Record<MutationUpdateYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: YoutubeUpdateInput, where: YoutubeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube | null> | prisma.Youtube | null
  }
  updateManyYoutubes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyYoutubesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: YoutubeUpdateManyMutationInput, where?: YoutubeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertYoutube: {
    type: 'Youtube'
    args: Record<MutationUpsertYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: YoutubeWhereUniqueInput, create: YoutubeCreateInput, update: YoutubeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube> | prisma.Youtube
  }
  deleteYoutube: {
    type: 'Youtube'
    args: Record<MutationDeleteYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: YoutubeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube | null> | prisma.Youtube | null
  }
  deleteManyYoutubes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyYoutubesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: YoutubeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFeedback: {
    type: 'Feedback'
    args: Record<MutationCreateFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback> | prisma.Feedback
  }
  updateFeedback: {
    type: 'Feedback'
    args: Record<MutationUpdateFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackUpdateInput, where: FeedbackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback | null> | prisma.Feedback | null
  }
  updateManyFeedbacks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFeedbacksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FeedbackUpdateManyMutationInput, where?: FeedbackWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFeedback: {
    type: 'Feedback'
    args: Record<MutationUpsertFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackWhereUniqueInput, create: FeedbackCreateInput, update: FeedbackUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback> | prisma.Feedback
  }
  deleteFeedback: {
    type: 'Feedback'
    args: Record<MutationDeleteFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FeedbackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback | null> | prisma.Feedback | null
  }
  deleteManyFeedbacks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFeedbacksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FeedbackWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCompany: {
    type: 'Company'
    args: Record<MutationCreateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  updateCompany: {
    type: 'Company'
    args: Record<MutationUpdateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateInput, where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updateManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateManyMutationInput, where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCompany: {
    type: 'Company'
    args: Record<MutationUpsertCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput, create: CompanyCreateInput, update: CompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  deleteCompany: {
    type: 'Company'
    args: Record<MutationDeleteCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  deleteManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'file', args?: SubscriptionFileArgs[] | false, alias?: string  } 
  | { name: 'location', args?: SubscriptionLocationArgs[] | false, alias?: string  } 
  | { name: 'geo', args?: SubscriptionGeoArgs[] | false, alias?: string  } 
  | { name: 'influencer', args?: SubscriptionInfluencerArgs[] | false, alias?: string  } 
  | { name: 'mediaKit', args?: SubscriptionMediaKitArgs[] | false, alias?: string  } 
  | { name: 'interest', args?: SubscriptionInterestArgs[] | false, alias?: string  } 
  | { name: 'jobs', args?: SubscriptionJobsArgs[] | false, alias?: string  } 
  | { name: 'social', args?: SubscriptionSocialArgs[] | false, alias?: string  } 
  | { name: 'instagram', args?: SubscriptionInstagramArgs[] | false, alias?: string  } 
  | { name: 'twitter', args?: SubscriptionTwitterArgs[] | false, alias?: string  } 
  | { name: 'youtube', args?: SubscriptionYoutubeArgs[] | false, alias?: string  } 
  | { name: 'feedback', args?: SubscriptionFeedbackArgs[] | false, alias?: string  } 
  | { name: 'company', args?: SubscriptionCompanyArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'file'
  | 'location'
  | 'geo'
  | 'influencer'
  | 'mediaKit'
  | 'interest'
  | 'jobs'
  | 'social'
  | 'instagram'
  | 'twitter'
  | 'youtube'
  | 'feedback'
  | 'company'


type SubscriptionFileArgs =
  | 'where'
type SubscriptionLocationArgs =
  | 'where'
type SubscriptionGeoArgs =
  | 'where'
type SubscriptionInfluencerArgs =
  | 'where'
type SubscriptionMediaKitArgs =
  | 'where'
type SubscriptionInterestArgs =
  | 'where'
type SubscriptionJobsArgs =
  | 'where'
type SubscriptionSocialArgs =
  | 'where'
type SubscriptionInstagramArgs =
  | 'where'
type SubscriptionTwitterArgs =
  | 'where'
type SubscriptionYoutubeArgs =
  | 'where'
type SubscriptionFeedbackArgs =
  | 'where'
type SubscriptionCompanyArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  file: {
    type: 'FileSubscriptionPayload'
    args: Record<SubscriptionFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileSubscriptionPayload | null> | prisma.FileSubscriptionPayload | null
  }
  location: {
    type: 'LocationSubscriptionPayload'
    args: Record<SubscriptionLocationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LocationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationSubscriptionPayload | null> | prisma.LocationSubscriptionPayload | null
  }
  geo: {
    type: 'GeoSubscriptionPayload'
    args: Record<SubscriptionGeoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GeoSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeoSubscriptionPayload | null> | prisma.GeoSubscriptionPayload | null
  }
  influencer: {
    type: 'InfluencerSubscriptionPayload'
    args: Record<SubscriptionInfluencerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InfluencerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InfluencerSubscriptionPayload | null> | prisma.InfluencerSubscriptionPayload | null
  }
  mediaKit: {
    type: 'MediaKitSubscriptionPayload'
    args: Record<SubscriptionMediaKitArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MediaKitSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKitSubscriptionPayload | null> | prisma.MediaKitSubscriptionPayload | null
  }
  interest: {
    type: 'InterestSubscriptionPayload'
    args: Record<SubscriptionInterestArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InterestSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InterestSubscriptionPayload | null> | prisma.InterestSubscriptionPayload | null
  }
  jobs: {
    type: 'JobsSubscriptionPayload'
    args: Record<SubscriptionJobsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: JobsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JobsSubscriptionPayload | null> | prisma.JobsSubscriptionPayload | null
  }
  social: {
    type: 'SocialSubscriptionPayload'
    args: Record<SubscriptionSocialArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SocialSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SocialSubscriptionPayload | null> | prisma.SocialSubscriptionPayload | null
  }
  instagram: {
    type: 'InstagramSubscriptionPayload'
    args: Record<SubscriptionInstagramArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InstagramSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstagramSubscriptionPayload | null> | prisma.InstagramSubscriptionPayload | null
  }
  twitter: {
    type: 'TwitterSubscriptionPayload'
    args: Record<SubscriptionTwitterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TwitterSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterSubscriptionPayload | null> | prisma.TwitterSubscriptionPayload | null
  }
  youtube: {
    type: 'YoutubeSubscriptionPayload'
    args: Record<SubscriptionYoutubeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: YoutubeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.YoutubeSubscriptionPayload | null> | prisma.YoutubeSubscriptionPayload | null
  }
  feedback: {
    type: 'FeedbackSubscriptionPayload'
    args: Record<SubscriptionFeedbackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FeedbackSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackSubscriptionPayload | null> | prisma.FeedbackSubscriptionPayload | null
  }
  company: {
    type: 'CompanySubscriptionPayload'
    args: Record<SubscriptionCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanySubscriptionPayload | null> | prisma.CompanySubscriptionPayload | null
  }
}
  

// Types for FileSubscriptionPayload

type FileSubscriptionPayloadObject =
  | FileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FilePreviousValues | null> | prisma.FilePreviousValues | null
  }
}
  

// Types for FilePreviousValues

type FilePreviousValuesObject =
  | FilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'secret', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'public_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'width', args?: [] | false, alias?: string  } 
  | { name: 'height', args?: [] | false, alias?: string  } 
  | { name: 'resource_type', args?: [] | false, alias?: string  } 
  | { name: 'contentType', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FilePreviousValuesFields =
  | 'id'
  | 'secret'
  | 'url'
  | 'public_id'
  | 'name'
  | 'size'
  | 'width'
  | 'height'
  | 'resource_type'
  | 'contentType'
  | 'createdAt'
  | 'updatedAt'



  

export interface FilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  secret: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  public_id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  width: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  height: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resource_type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  contentType: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LocationSubscriptionPayload

type LocationSubscriptionPayloadObject =
  | LocationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LocationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LocationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Location'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Location | null> | prisma.Location | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LocationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LocationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LocationPreviousValues | null> | prisma.LocationPreviousValues | null
  }
}
  

// Types for LocationPreviousValues

type LocationPreviousValuesObject =
  | LocationPreviousValuesFields
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type LocationPreviousValuesFields =
  | 'updatedAt'
  | 'createdAt'
  | 'id'
  | 'name'



  

export interface LocationPreviousValuesFieldDetails {
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GeoSubscriptionPayload

type GeoSubscriptionPayloadObject =
  | GeoSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GeoSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GeoSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GeoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Geo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Geo | null> | prisma.Geo | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GeoPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GeoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GeoPreviousValues | null> | prisma.GeoPreviousValues | null
  }
}
  

// Types for GeoPreviousValues

type GeoPreviousValuesObject =
  | GeoPreviousValuesFields
  | { name: 'lat', args?: [] | false, alias?: string  } 
  | { name: 'lng', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type GeoPreviousValuesFields =
  | 'lat'
  | 'lng'
  | 'id'
  | 'updatedAt'
  | 'createdAt'



  

export interface GeoPreviousValuesFieldDetails {
  lat: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lng: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InfluencerSubscriptionPayload

type InfluencerSubscriptionPayloadObject =
  | InfluencerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InfluencerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InfluencerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InfluencerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Influencer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InfluencerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Influencer | null> | prisma.Influencer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InfluencerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InfluencerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InfluencerPreviousValues | null> | prisma.InfluencerPreviousValues | null
  }
}
  

// Types for InfluencerPreviousValues

type InfluencerPreviousValuesObject =
  | InfluencerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'verified', args?: [] | false, alias?: string  } 
  | { name: 'specialty', args?: [] | false, alias?: string  } 

type InfluencerPreviousValuesFields =
  | 'id'
  | 'email'
  | 'handle'
  | 'avatar'
  | 'name'
  | 'bio'
  | 'updatedAt'
  | 'createdAt'
  | 'password'
  | 'verified'
  | 'specialty'



  

export interface InfluencerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  verified: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  specialty: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for MediaKitSubscriptionPayload

type MediaKitSubscriptionPayloadObject =
  | MediaKitSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MediaKitSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MediaKitSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MediaKit'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaKitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKit | null> | prisma.MediaKit | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MediaKitPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MediaKitSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MediaKitPreviousValues | null> | prisma.MediaKitPreviousValues | null
  }
}
  

// Types for MediaKitPreviousValues

type MediaKitPreviousValuesObject =
  | MediaKitPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type MediaKitPreviousValuesFields =
  | 'id'
  | 'status'
  | 'updatedAt'
  | 'createdAt'



  

export interface MediaKitPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MediaKitPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InterestSubscriptionPayload

type InterestSubscriptionPayloadObject =
  | InterestSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InterestSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InterestSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InterestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Interest'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InterestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Interest | null> | prisma.Interest | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InterestPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InterestSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InterestPreviousValues | null> | prisma.InterestPreviousValues | null
  }
}
  

// Types for InterestPreviousValues

type InterestPreviousValuesObject =
  | InterestPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 

type InterestPreviousValuesFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'tag'



  

export interface InterestPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for JobsSubscriptionPayload

type JobsSubscriptionPayloadObject =
  | JobsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type JobsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface JobsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JobsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Jobs'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"JobsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Jobs | null> | prisma.Jobs | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'JobsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"JobsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JobsPreviousValues | null> | prisma.JobsPreviousValues | null
  }
}
  

// Types for JobsPreviousValues

type JobsPreviousValuesObject =
  | JobsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'cost', args?: [] | false, alias?: string  } 
  | { name: 'accepted', args?: [] | false, alias?: string  } 

type JobsPreviousValuesFields =
  | 'id'
  | 'status'
  | 'updatedAt'
  | 'createdAt'
  | 'cost'
  | 'accepted'



  

export interface JobsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JobsPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cost: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  accepted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for SocialSubscriptionPayload

type SocialSubscriptionPayloadObject =
  | SocialSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SocialSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SocialSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SocialSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Social'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SocialSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Social | null> | prisma.Social | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SocialPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SocialSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SocialPreviousValues | null> | prisma.SocialPreviousValues | null
  }
}
  

// Types for SocialPreviousValues

type SocialPreviousValuesObject =
  | SocialPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type SocialPreviousValuesFields =
  | 'id'
  | 'status'
  | 'updatedAt'
  | 'createdAt'



  

export interface SocialPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SocialPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InstagramSubscriptionPayload

type InstagramSubscriptionPayloadObject =
  | InstagramSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InstagramSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InstagramSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InstagramSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Instagram'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InstagramSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Instagram | null> | prisma.Instagram | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InstagramPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InstagramSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InstagramPreviousValues | null> | prisma.InstagramPreviousValues | null
  }
}
  

// Types for InstagramPreviousValues

type InstagramPreviousValuesObject =
  | InstagramPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type InstagramPreviousValuesFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'handle'
  | 'followers'
  | 'analytics'
  | 'link'



  

export interface InstagramPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TwitterSubscriptionPayload

type TwitterSubscriptionPayloadObject =
  | TwitterSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TwitterSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TwitterSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TwitterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Twitter'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TwitterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Twitter | null> | prisma.Twitter | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TwitterPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TwitterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TwitterPreviousValues | null> | prisma.TwitterPreviousValues | null
  }
}
  

// Types for TwitterPreviousValues

type TwitterPreviousValuesObject =
  | TwitterPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type TwitterPreviousValuesFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'analytics'
  | 'followers'
  | 'handle'
  | 'link'



  

export interface TwitterPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for YoutubeSubscriptionPayload

type YoutubeSubscriptionPayloadObject =
  | YoutubeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type YoutubeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface YoutubeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"YoutubeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Youtube'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"YoutubeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Youtube | null> | prisma.Youtube | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'YoutubePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"YoutubeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.YoutubePreviousValues | null> | prisma.YoutubePreviousValues | null
  }
}
  

// Types for YoutubePreviousValues

type YoutubePreviousValuesObject =
  | YoutubePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'followers', args?: [] | false, alias?: string  } 
  | { name: 'analytics', args?: [] | false, alias?: string  } 
  | { name: 'handle', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type YoutubePreviousValuesFields =
  | 'id'
  | 'updatedAt'
  | 'createdAt'
  | 'followers'
  | 'analytics'
  | 'handle'
  | 'link'



  

export interface YoutubePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  followers: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  analytics: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  handle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for FeedbackSubscriptionPayload

type FeedbackSubscriptionPayloadObject =
  | FeedbackSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FeedbackSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FeedbackSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Feedback'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Feedback | null> | prisma.Feedback | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FeedbackPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FeedbackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FeedbackPreviousValues | null> | prisma.FeedbackPreviousValues | null
  }
}
  

// Types for FeedbackPreviousValues

type FeedbackPreviousValuesObject =
  | FeedbackPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type FeedbackPreviousValuesFields =
  | 'id'
  | 'status'
  | 'updatedAt'
  | 'createdAt'
  | 'comment'



  

export interface FeedbackPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FeedbackPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CompanySubscriptionPayload

type CompanySubscriptionPayloadObject =
  | CompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyPreviousValues | null> | prisma.CompanyPreviousValues | null
  }
}
  

// Types for CompanyPreviousValues

type CompanyPreviousValuesObject =
  | CompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 

type CompanyPreviousValuesFields =
  | 'id'
  | 'status'
  | 'updatedAt'
  | 'createdAt'
  | 'name'
  | 'location'



  

export interface CompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface FileWhereUniqueInput {
  id?: string | null
  secret?: string | null
  url?: string | null
}
export type FileWhereUniqueInputInputObject =
  | Extract<keyof FileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface MediaKitWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  influencer?: InfluencerWhereInput | null
  files_every?: FileWhereInput | null
  files_some?: FileWhereInput | null
  files_none?: FileWhereInput | null
  interests_every?: InterestWhereInput | null
  interests_some?: InterestWhereInput | null
  interests_none?: InterestWhereInput | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: MediaKitWhereInput[]
  OR?: MediaKitWhereInput[]
  NOT?: MediaKitWhereInput[]
}
export type MediaKitWhereInputInputObject =
  | Extract<keyof MediaKitWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'files_every', alias?: string  } 
  | { name: 'files_some', alias?: string  } 
  | { name: 'files_none', alias?: string  } 
  | { name: 'interests_every', alias?: string  } 
  | { name: 'interests_some', alias?: string  } 
  | { name: 'interests_none', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InfluencerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  avatar?: string | null
  avatar_not?: string | null
  avatar_in?: string[]
  avatar_not_in?: string[]
  avatar_lt?: string | null
  avatar_lte?: string | null
  avatar_gt?: string | null
  avatar_gte?: string | null
  avatar_contains?: string | null
  avatar_not_contains?: string | null
  avatar_starts_with?: string | null
  avatar_not_starts_with?: string | null
  avatar_ends_with?: string | null
  avatar_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  bio?: string | null
  bio_not?: string | null
  bio_in?: string[]
  bio_not_in?: string[]
  bio_lt?: string | null
  bio_lte?: string | null
  bio_gt?: string | null
  bio_gte?: string | null
  bio_contains?: string | null
  bio_not_contains?: string | null
  bio_starts_with?: string | null
  bio_not_starts_with?: string | null
  bio_ends_with?: string | null
  bio_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  verified?: boolean | null
  verified_not?: boolean | null
  specialty?: string | null
  specialty_not?: string | null
  specialty_in?: string[]
  specialty_not_in?: string[]
  specialty_lt?: string | null
  specialty_lte?: string | null
  specialty_gt?: string | null
  specialty_gte?: string | null
  specialty_contains?: string | null
  specialty_not_contains?: string | null
  specialty_starts_with?: string | null
  specialty_not_starts_with?: string | null
  specialty_ends_with?: string | null
  specialty_not_ends_with?: string | null
  location?: LocationWhereInput | null
  mediaKit_every?: MediaKitWhereInput | null
  mediaKit_some?: MediaKitWhereInput | null
  mediaKit_none?: MediaKitWhereInput | null
  files_every?: FileWhereInput | null
  files_some?: FileWhereInput | null
  files_none?: FileWhereInput | null
  social?: SocialWhereInput | null
  AND?: InfluencerWhereInput[]
  OR?: InfluencerWhereInput[]
  NOT?: InfluencerWhereInput[]
}
export type InfluencerWhereInputInputObject =
  | Extract<keyof InfluencerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'avatar_not', alias?: string  } 
  | { name: 'avatar_in', alias?: string  } 
  | { name: 'avatar_not_in', alias?: string  } 
  | { name: 'avatar_lt', alias?: string  } 
  | { name: 'avatar_lte', alias?: string  } 
  | { name: 'avatar_gt', alias?: string  } 
  | { name: 'avatar_gte', alias?: string  } 
  | { name: 'avatar_contains', alias?: string  } 
  | { name: 'avatar_not_contains', alias?: string  } 
  | { name: 'avatar_starts_with', alias?: string  } 
  | { name: 'avatar_not_starts_with', alias?: string  } 
  | { name: 'avatar_ends_with', alias?: string  } 
  | { name: 'avatar_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'bio_not', alias?: string  } 
  | { name: 'bio_in', alias?: string  } 
  | { name: 'bio_not_in', alias?: string  } 
  | { name: 'bio_lt', alias?: string  } 
  | { name: 'bio_lte', alias?: string  } 
  | { name: 'bio_gt', alias?: string  } 
  | { name: 'bio_gte', alias?: string  } 
  | { name: 'bio_contains', alias?: string  } 
  | { name: 'bio_not_contains', alias?: string  } 
  | { name: 'bio_starts_with', alias?: string  } 
  | { name: 'bio_not_starts_with', alias?: string  } 
  | { name: 'bio_ends_with', alias?: string  } 
  | { name: 'bio_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'verified_not', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'specialty_not', alias?: string  } 
  | { name: 'specialty_in', alias?: string  } 
  | { name: 'specialty_not_in', alias?: string  } 
  | { name: 'specialty_lt', alias?: string  } 
  | { name: 'specialty_lte', alias?: string  } 
  | { name: 'specialty_gt', alias?: string  } 
  | { name: 'specialty_gte', alias?: string  } 
  | { name: 'specialty_contains', alias?: string  } 
  | { name: 'specialty_not_contains', alias?: string  } 
  | { name: 'specialty_starts_with', alias?: string  } 
  | { name: 'specialty_not_starts_with', alias?: string  } 
  | { name: 'specialty_ends_with', alias?: string  } 
  | { name: 'specialty_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit_every', alias?: string  } 
  | { name: 'mediaKit_some', alias?: string  } 
  | { name: 'mediaKit_none', alias?: string  } 
  | { name: 'files_every', alias?: string  } 
  | { name: 'files_some', alias?: string  } 
  | { name: 'files_none', alias?: string  } 
  | { name: 'social', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationWhereInput {
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  geo?: GeoWhereInput | null
  influencer?: InfluencerWhereInput | null
  AND?: LocationWhereInput[]
  OR?: LocationWhereInput[]
  NOT?: LocationWhereInput[]
}
export type LocationWhereInputInputObject =
  | Extract<keyof LocationWhereInput, string>
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'geo', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeoWhereInput {
  lat?: number | null
  lat_not?: number | null
  lat_in?: number[]
  lat_not_in?: number[]
  lat_lt?: number | null
  lat_lte?: number | null
  lat_gt?: number | null
  lat_gte?: number | null
  lng?: number | null
  lng_not?: number | null
  lng_in?: number[]
  lng_not_in?: number[]
  lng_lt?: number | null
  lng_lte?: number | null
  lng_gt?: number | null
  lng_gte?: number | null
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  location?: LocationWhereInput | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: GeoWhereInput[]
  OR?: GeoWhereInput[]
  NOT?: GeoWhereInput[]
}
export type GeoWhereInputInputObject =
  | Extract<keyof GeoWhereInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lat_not', alias?: string  } 
  | { name: 'lat_in', alias?: string  } 
  | { name: 'lat_not_in', alias?: string  } 
  | { name: 'lat_lt', alias?: string  } 
  | { name: 'lat_lte', alias?: string  } 
  | { name: 'lat_gt', alias?: string  } 
  | { name: 'lat_gte', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'lng_not', alias?: string  } 
  | { name: 'lng_in', alias?: string  } 
  | { name: 'lng_not_in', alias?: string  } 
  | { name: 'lng_lt', alias?: string  } 
  | { name: 'lng_lte', alias?: string  } 
  | { name: 'lng_gt', alias?: string  } 
  | { name: 'lng_gte', alias?: string  } 
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  secret?: string | null
  secret_not?: string | null
  secret_in?: string[]
  secret_not_in?: string[]
  secret_lt?: string | null
  secret_lte?: string | null
  secret_gt?: string | null
  secret_gte?: string | null
  secret_contains?: string | null
  secret_not_contains?: string | null
  secret_starts_with?: string | null
  secret_not_starts_with?: string | null
  secret_ends_with?: string | null
  secret_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  public_id?: string | null
  public_id_not?: string | null
  public_id_in?: string[]
  public_id_not_in?: string[]
  public_id_lt?: string | null
  public_id_lte?: string | null
  public_id_gt?: string | null
  public_id_gte?: string | null
  public_id_contains?: string | null
  public_id_not_contains?: string | null
  public_id_starts_with?: string | null
  public_id_not_starts_with?: string | null
  public_id_ends_with?: string | null
  public_id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  size?: number | null
  size_not?: number | null
  size_in?: number[]
  size_not_in?: number[]
  size_lt?: number | null
  size_lte?: number | null
  size_gt?: number | null
  size_gte?: number | null
  width?: number | null
  width_not?: number | null
  width_in?: number[]
  width_not_in?: number[]
  width_lt?: number | null
  width_lte?: number | null
  width_gt?: number | null
  width_gte?: number | null
  height?: number | null
  height_not?: number | null
  height_in?: number[]
  height_not_in?: number[]
  height_lt?: number | null
  height_lte?: number | null
  height_gt?: number | null
  height_gte?: number | null
  resource_type?: string | null
  resource_type_not?: string | null
  resource_type_in?: string[]
  resource_type_not_in?: string[]
  resource_type_lt?: string | null
  resource_type_lte?: string | null
  resource_type_gt?: string | null
  resource_type_gte?: string | null
  resource_type_contains?: string | null
  resource_type_not_contains?: string | null
  resource_type_starts_with?: string | null
  resource_type_not_starts_with?: string | null
  resource_type_ends_with?: string | null
  resource_type_not_ends_with?: string | null
  contentType?: string | null
  contentType_not?: string | null
  contentType_in?: string[]
  contentType_not_in?: string[]
  contentType_lt?: string | null
  contentType_lte?: string | null
  contentType_gt?: string | null
  contentType_gte?: string | null
  contentType_contains?: string | null
  contentType_not_contains?: string | null
  contentType_starts_with?: string | null
  contentType_not_starts_with?: string | null
  contentType_ends_with?: string | null
  contentType_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  influencer?: InfluencerWhereInput | null
  mediaKit_every?: MediaKitWhereInput | null
  mediaKit_some?: MediaKitWhereInput | null
  mediaKit_none?: MediaKitWhereInput | null
  AND?: FileWhereInput[]
  OR?: FileWhereInput[]
  NOT?: FileWhereInput[]
}
export type FileWhereInputInputObject =
  | Extract<keyof FileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'secret', alias?: string  } 
  | { name: 'secret_not', alias?: string  } 
  | { name: 'secret_in', alias?: string  } 
  | { name: 'secret_not_in', alias?: string  } 
  | { name: 'secret_lt', alias?: string  } 
  | { name: 'secret_lte', alias?: string  } 
  | { name: 'secret_gt', alias?: string  } 
  | { name: 'secret_gte', alias?: string  } 
  | { name: 'secret_contains', alias?: string  } 
  | { name: 'secret_not_contains', alias?: string  } 
  | { name: 'secret_starts_with', alias?: string  } 
  | { name: 'secret_not_starts_with', alias?: string  } 
  | { name: 'secret_ends_with', alias?: string  } 
  | { name: 'secret_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'public_id_not', alias?: string  } 
  | { name: 'public_id_in', alias?: string  } 
  | { name: 'public_id_not_in', alias?: string  } 
  | { name: 'public_id_lt', alias?: string  } 
  | { name: 'public_id_lte', alias?: string  } 
  | { name: 'public_id_gt', alias?: string  } 
  | { name: 'public_id_gte', alias?: string  } 
  | { name: 'public_id_contains', alias?: string  } 
  | { name: 'public_id_not_contains', alias?: string  } 
  | { name: 'public_id_starts_with', alias?: string  } 
  | { name: 'public_id_not_starts_with', alias?: string  } 
  | { name: 'public_id_ends_with', alias?: string  } 
  | { name: 'public_id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'size_not', alias?: string  } 
  | { name: 'size_in', alias?: string  } 
  | { name: 'size_not_in', alias?: string  } 
  | { name: 'size_lt', alias?: string  } 
  | { name: 'size_lte', alias?: string  } 
  | { name: 'size_gt', alias?: string  } 
  | { name: 'size_gte', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'width_not', alias?: string  } 
  | { name: 'width_in', alias?: string  } 
  | { name: 'width_not_in', alias?: string  } 
  | { name: 'width_lt', alias?: string  } 
  | { name: 'width_lte', alias?: string  } 
  | { name: 'width_gt', alias?: string  } 
  | { name: 'width_gte', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'height_not', alias?: string  } 
  | { name: 'height_in', alias?: string  } 
  | { name: 'height_not_in', alias?: string  } 
  | { name: 'height_lt', alias?: string  } 
  | { name: 'height_lte', alias?: string  } 
  | { name: 'height_gt', alias?: string  } 
  | { name: 'height_gte', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'resource_type_not', alias?: string  } 
  | { name: 'resource_type_in', alias?: string  } 
  | { name: 'resource_type_not_in', alias?: string  } 
  | { name: 'resource_type_lt', alias?: string  } 
  | { name: 'resource_type_lte', alias?: string  } 
  | { name: 'resource_type_gt', alias?: string  } 
  | { name: 'resource_type_gte', alias?: string  } 
  | { name: 'resource_type_contains', alias?: string  } 
  | { name: 'resource_type_not_contains', alias?: string  } 
  | { name: 'resource_type_starts_with', alias?: string  } 
  | { name: 'resource_type_not_starts_with', alias?: string  } 
  | { name: 'resource_type_ends_with', alias?: string  } 
  | { name: 'resource_type_not_ends_with', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'contentType_not', alias?: string  } 
  | { name: 'contentType_in', alias?: string  } 
  | { name: 'contentType_not_in', alias?: string  } 
  | { name: 'contentType_lt', alias?: string  } 
  | { name: 'contentType_lte', alias?: string  } 
  | { name: 'contentType_gt', alias?: string  } 
  | { name: 'contentType_gte', alias?: string  } 
  | { name: 'contentType_contains', alias?: string  } 
  | { name: 'contentType_not_contains', alias?: string  } 
  | { name: 'contentType_starts_with', alias?: string  } 
  | { name: 'contentType_not_starts_with', alias?: string  } 
  | { name: 'contentType_ends_with', alias?: string  } 
  | { name: 'contentType_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'mediaKit_every', alias?: string  } 
  | { name: 'mediaKit_some', alias?: string  } 
  | { name: 'mediaKit_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SocialWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  instagram?: InstagramWhereInput | null
  youtube?: YoutubeWhereInput | null
  twitter?: TwitterWhereInput | null
  influencer?: InfluencerWhereInput | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: SocialWhereInput[]
  OR?: SocialWhereInput[]
  NOT?: SocialWhereInput[]
}
export type SocialWhereInputInputObject =
  | Extract<keyof SocialWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'instagram', alias?: string  } 
  | { name: 'youtube', alias?: string  } 
  | { name: 'twitter', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InstagramWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  followers?: number | null
  followers_not?: number | null
  followers_in?: number[]
  followers_not_in?: number[]
  followers_lt?: number | null
  followers_lte?: number | null
  followers_gt?: number | null
  followers_gte?: number | null
  link?: string | null
  link_not?: string | null
  link_in?: string[]
  link_not_in?: string[]
  link_lt?: string | null
  link_lte?: string | null
  link_gt?: string | null
  link_gte?: string | null
  link_contains?: string | null
  link_not_contains?: string | null
  link_starts_with?: string | null
  link_not_starts_with?: string | null
  link_ends_with?: string | null
  link_not_ends_with?: string | null
  AND?: InstagramWhereInput[]
  OR?: InstagramWhereInput[]
  NOT?: InstagramWhereInput[]
}
export type InstagramWhereInputInputObject =
  | Extract<keyof InstagramWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'followers_not', alias?: string  } 
  | { name: 'followers_in', alias?: string  } 
  | { name: 'followers_not_in', alias?: string  } 
  | { name: 'followers_lt', alias?: string  } 
  | { name: 'followers_lte', alias?: string  } 
  | { name: 'followers_gt', alias?: string  } 
  | { name: 'followers_gte', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'link_not', alias?: string  } 
  | { name: 'link_in', alias?: string  } 
  | { name: 'link_not_in', alias?: string  } 
  | { name: 'link_lt', alias?: string  } 
  | { name: 'link_lte', alias?: string  } 
  | { name: 'link_gt', alias?: string  } 
  | { name: 'link_gte', alias?: string  } 
  | { name: 'link_contains', alias?: string  } 
  | { name: 'link_not_contains', alias?: string  } 
  | { name: 'link_starts_with', alias?: string  } 
  | { name: 'link_not_starts_with', alias?: string  } 
  | { name: 'link_ends_with', alias?: string  } 
  | { name: 'link_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface YoutubeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  followers?: number | null
  followers_not?: number | null
  followers_in?: number[]
  followers_not_in?: number[]
  followers_lt?: number | null
  followers_lte?: number | null
  followers_gt?: number | null
  followers_gte?: number | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  link?: string | null
  link_not?: string | null
  link_in?: string[]
  link_not_in?: string[]
  link_lt?: string | null
  link_lte?: string | null
  link_gt?: string | null
  link_gte?: string | null
  link_contains?: string | null
  link_not_contains?: string | null
  link_starts_with?: string | null
  link_not_starts_with?: string | null
  link_ends_with?: string | null
  link_not_ends_with?: string | null
  AND?: YoutubeWhereInput[]
  OR?: YoutubeWhereInput[]
  NOT?: YoutubeWhereInput[]
}
export type YoutubeWhereInputInputObject =
  | Extract<keyof YoutubeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'followers_not', alias?: string  } 
  | { name: 'followers_in', alias?: string  } 
  | { name: 'followers_not_in', alias?: string  } 
  | { name: 'followers_lt', alias?: string  } 
  | { name: 'followers_lte', alias?: string  } 
  | { name: 'followers_gt', alias?: string  } 
  | { name: 'followers_gte', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'link_not', alias?: string  } 
  | { name: 'link_in', alias?: string  } 
  | { name: 'link_not_in', alias?: string  } 
  | { name: 'link_lt', alias?: string  } 
  | { name: 'link_lte', alias?: string  } 
  | { name: 'link_gt', alias?: string  } 
  | { name: 'link_gte', alias?: string  } 
  | { name: 'link_contains', alias?: string  } 
  | { name: 'link_not_contains', alias?: string  } 
  | { name: 'link_starts_with', alias?: string  } 
  | { name: 'link_not_starts_with', alias?: string  } 
  | { name: 'link_ends_with', alias?: string  } 
  | { name: 'link_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TwitterWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  followers?: number | null
  followers_not?: number | null
  followers_in?: number[]
  followers_not_in?: number[]
  followers_lt?: number | null
  followers_lte?: number | null
  followers_gt?: number | null
  followers_gte?: number | null
  handle?: string | null
  handle_not?: string | null
  handle_in?: string[]
  handle_not_in?: string[]
  handle_lt?: string | null
  handle_lte?: string | null
  handle_gt?: string | null
  handle_gte?: string | null
  handle_contains?: string | null
  handle_not_contains?: string | null
  handle_starts_with?: string | null
  handle_not_starts_with?: string | null
  handle_ends_with?: string | null
  handle_not_ends_with?: string | null
  link?: string | null
  link_not?: string | null
  link_in?: string[]
  link_not_in?: string[]
  link_lt?: string | null
  link_lte?: string | null
  link_gt?: string | null
  link_gte?: string | null
  link_contains?: string | null
  link_not_contains?: string | null
  link_starts_with?: string | null
  link_not_starts_with?: string | null
  link_ends_with?: string | null
  link_not_ends_with?: string | null
  AND?: TwitterWhereInput[]
  OR?: TwitterWhereInput[]
  NOT?: TwitterWhereInput[]
}
export type TwitterWhereInputInputObject =
  | Extract<keyof TwitterWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'followers_not', alias?: string  } 
  | { name: 'followers_in', alias?: string  } 
  | { name: 'followers_not_in', alias?: string  } 
  | { name: 'followers_lt', alias?: string  } 
  | { name: 'followers_lte', alias?: string  } 
  | { name: 'followers_gt', alias?: string  } 
  | { name: 'followers_gte', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'handle_not', alias?: string  } 
  | { name: 'handle_in', alias?: string  } 
  | { name: 'handle_not_in', alias?: string  } 
  | { name: 'handle_lt', alias?: string  } 
  | { name: 'handle_lte', alias?: string  } 
  | { name: 'handle_gt', alias?: string  } 
  | { name: 'handle_gte', alias?: string  } 
  | { name: 'handle_contains', alias?: string  } 
  | { name: 'handle_not_contains', alias?: string  } 
  | { name: 'handle_starts_with', alias?: string  } 
  | { name: 'handle_not_starts_with', alias?: string  } 
  | { name: 'handle_ends_with', alias?: string  } 
  | { name: 'handle_not_ends_with', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'link_not', alias?: string  } 
  | { name: 'link_in', alias?: string  } 
  | { name: 'link_not_in', alias?: string  } 
  | { name: 'link_lt', alias?: string  } 
  | { name: 'link_lte', alias?: string  } 
  | { name: 'link_gt', alias?: string  } 
  | { name: 'link_gte', alias?: string  } 
  | { name: 'link_contains', alias?: string  } 
  | { name: 'link_not_contains', alias?: string  } 
  | { name: 'link_starts_with', alias?: string  } 
  | { name: 'link_not_starts_with', alias?: string  } 
  | { name: 'link_ends_with', alias?: string  } 
  | { name: 'link_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InterestWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  tag?: string | null
  tag_not?: string | null
  tag_in?: string[]
  tag_not_in?: string[]
  tag_lt?: string | null
  tag_lte?: string | null
  tag_gt?: string | null
  tag_gte?: string | null
  tag_contains?: string | null
  tag_not_contains?: string | null
  tag_starts_with?: string | null
  tag_not_starts_with?: string | null
  tag_ends_with?: string | null
  tag_not_ends_with?: string | null
  influencer?: InfluencerWhereInput | null
  AND?: InterestWhereInput[]
  OR?: InterestWhereInput[]
  NOT?: InterestWhereInput[]
}
export type InterestWhereInputInputObject =
  | Extract<keyof InterestWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'tag_not', alias?: string  } 
  | { name: 'tag_in', alias?: string  } 
  | { name: 'tag_not_in', alias?: string  } 
  | { name: 'tag_lt', alias?: string  } 
  | { name: 'tag_lte', alias?: string  } 
  | { name: 'tag_gt', alias?: string  } 
  | { name: 'tag_gte', alias?: string  } 
  | { name: 'tag_contains', alias?: string  } 
  | { name: 'tag_not_contains', alias?: string  } 
  | { name: 'tag_starts_with', alias?: string  } 
  | { name: 'tag_not_starts_with', alias?: string  } 
  | { name: 'tag_ends_with', alias?: string  } 
  | { name: 'tag_not_ends_with', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationWhereUniqueInput {
  id?: string | null
}
export type LocationWhereUniqueInputInputObject =
  | Extract<keyof LocationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GeoWhereUniqueInput {
  id?: string | null
}
export type GeoWhereUniqueInputInputObject =
  | Extract<keyof GeoWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InfluencerWhereUniqueInput {
  id?: string | null
  email?: string | null
  handle?: string | null
}
export type InfluencerWhereUniqueInputInputObject =
  | Extract<keyof InfluencerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  
export interface MediaKitWhereUniqueInput {
  id?: string | null
}
export type MediaKitWhereUniqueInputInputObject =
  | Extract<keyof MediaKitWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InterestWhereUniqueInput {
  id?: string | null
}
export type InterestWhereUniqueInputInputObject =
  | Extract<keyof InterestWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface JobsWhereUniqueInput {
  id?: string | null
}
export type JobsWhereUniqueInputInputObject =
  | Extract<keyof JobsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface JobsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  company?: CompanyWhereInput | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  cost?: string | null
  cost_not?: string | null
  cost_in?: string[]
  cost_not_in?: string[]
  cost_lt?: string | null
  cost_lte?: string | null
  cost_gt?: string | null
  cost_gte?: string | null
  cost_contains?: string | null
  cost_not_contains?: string | null
  cost_starts_with?: string | null
  cost_not_starts_with?: string | null
  cost_ends_with?: string | null
  cost_not_ends_with?: string | null
  accepted?: boolean | null
  accepted_not?: boolean | null
  AND?: JobsWhereInput[]
  OR?: JobsWhereInput[]
  NOT?: JobsWhereInput[]
}
export type JobsWhereInputInputObject =
  | Extract<keyof JobsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'cost_not', alias?: string  } 
  | { name: 'cost_in', alias?: string  } 
  | { name: 'cost_not_in', alias?: string  } 
  | { name: 'cost_lt', alias?: string  } 
  | { name: 'cost_lte', alias?: string  } 
  | { name: 'cost_gt', alias?: string  } 
  | { name: 'cost_gte', alias?: string  } 
  | { name: 'cost_contains', alias?: string  } 
  | { name: 'cost_not_contains', alias?: string  } 
  | { name: 'cost_starts_with', alias?: string  } 
  | { name: 'cost_not_starts_with', alias?: string  } 
  | { name: 'cost_ends_with', alias?: string  } 
  | { name: 'cost_not_ends_with', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  | { name: 'accepted_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  hires?: InfluencerWhereInput | null
  jobs_every?: JobsWhereInput | null
  jobs_some?: JobsWhereInput | null
  jobs_none?: JobsWhereInput | null
  feedback?: FeedbackWhereInput | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: CompanyWhereInput[]
  OR?: CompanyWhereInput[]
  NOT?: CompanyWhereInput[]
}
export type CompanyWhereInputInputObject =
  | Extract<keyof CompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'jobs_every', alias?: string  } 
  | { name: 'jobs_some', alias?: string  } 
  | { name: 'jobs_none', alias?: string  } 
  | { name: 'feedback', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  influencer?: InfluencerWhereInput | null
  company?: CompanyWhereInput | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  AND?: FeedbackWhereInput[]
  OR?: FeedbackWhereInput[]
  NOT?: FeedbackWhereInput[]
}
export type FeedbackWhereInputInputObject =
  | Extract<keyof FeedbackWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SocialWhereUniqueInput {
  id?: string | null
}
export type SocialWhereUniqueInputInputObject =
  | Extract<keyof SocialWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InstagramWhereUniqueInput {
  id?: string | null
}
export type InstagramWhereUniqueInputInputObject =
  | Extract<keyof InstagramWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TwitterWhereUniqueInput {
  id?: string | null
}
export type TwitterWhereUniqueInputInputObject =
  | Extract<keyof TwitterWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface YoutubeWhereUniqueInput {
  id?: string | null
}
export type YoutubeWhereUniqueInputInputObject =
  | Extract<keyof YoutubeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FeedbackWhereUniqueInput {
  id?: string | null
}
export type FeedbackWhereUniqueInputInputObject =
  | Extract<keyof FeedbackWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CompanyWhereUniqueInput {
  id?: string | null
}
export type CompanyWhereUniqueInputInputObject =
  | Extract<keyof CompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FileCreateInput {
  secret?: string
  url?: string
  public_id?: string
  name?: string
  size?: number
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string
  influencer?: InfluencerCreateOneWithoutFilesInput
  mediaKit?: MediaKitCreateManyWithoutFilesInput | null
}
export type FileCreateInputInputObject =
  | Extract<keyof FileCreateInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  
export interface InfluencerCreateOneWithoutFilesInput {
  create?: InfluencerCreateWithoutFilesInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerCreateOneWithoutFilesInputInputObject =
  | Extract<keyof InfluencerCreateOneWithoutFilesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerCreateWithoutFilesInput {
  email?: string
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string
  verified?: boolean | null
  specialty?: string | null
  location?: LocationCreateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitCreateManyWithoutInfluencerInput | null
  social?: SocialCreateOneWithoutInfluencerInput | null
}
export type InfluencerCreateWithoutFilesInputInputObject =
  | Extract<keyof InfluencerCreateWithoutFilesInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface LocationCreateOneWithoutInfluencerInput {
  create?: LocationCreateWithoutInfluencerInput | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationCreateOneWithoutInfluencerInputInputObject =
  | Extract<keyof LocationCreateOneWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationCreateWithoutInfluencerInput {
  name?: string | null
  geo?: GeoCreateOneWithoutLocationInput | null
}
export type LocationCreateWithoutInfluencerInputInputObject =
  | Extract<keyof LocationCreateWithoutInfluencerInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'geo', alias?: string  } 
  
export interface GeoCreateOneWithoutLocationInput {
  create?: GeoCreateWithoutLocationInput | null
  connect?: GeoWhereUniqueInput | null
}
export type GeoCreateOneWithoutLocationInputInputObject =
  | Extract<keyof GeoCreateOneWithoutLocationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GeoCreateWithoutLocationInput {
  lat?: number | null
  lng?: number | null
}
export type GeoCreateWithoutLocationInputInputObject =
  | Extract<keyof GeoCreateWithoutLocationInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface MediaKitCreateManyWithoutInfluencerInput {
  create?: MediaKitCreateWithoutInfluencerInput[]
  connect?: MediaKitWhereUniqueInput[]
}
export type MediaKitCreateManyWithoutInfluencerInputInputObject =
  | Extract<keyof MediaKitCreateManyWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MediaKitCreateWithoutInfluencerInput {
  files?: FileCreateManyWithoutMediaKitInput | null
  interests?: InterestCreateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitCreateWithoutInfluencerInputInputObject =
  | Extract<keyof MediaKitCreateWithoutInfluencerInput, string>
  | { name: 'files', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface FileCreateManyWithoutMediaKitInput {
  create?: FileCreateWithoutMediaKitInput[]
  connect?: FileWhereUniqueInput[]
}
export type FileCreateManyWithoutMediaKitInputInputObject =
  | Extract<keyof FileCreateManyWithoutMediaKitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileCreateWithoutMediaKitInput {
  secret?: string
  url?: string
  public_id?: string
  name?: string
  size?: number
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string
  influencer?: InfluencerCreateOneWithoutFilesInput
}
export type FileCreateWithoutMediaKitInputInputObject =
  | Extract<keyof FileCreateWithoutMediaKitInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InterestCreateManyInput {
  create?: InterestCreateInput[]
  connect?: InterestWhereUniqueInput[]
}
export type InterestCreateManyInputInputObject =
  | Extract<keyof InterestCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InterestCreateInput {
  tag?: string | null
  influencer?: InfluencerCreateOneInput | null
}
export type InterestCreateInputInputObject =
  | Extract<keyof InterestCreateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerCreateOneInput {
  create?: InfluencerCreateInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerCreateOneInputInputObject =
  | Extract<keyof InfluencerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerCreateInput {
  email?: string
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string
  verified?: boolean | null
  specialty?: string | null
  location?: LocationCreateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitCreateManyWithoutInfluencerInput | null
  files?: FileCreateManyWithoutInfluencerInput | null
  social?: SocialCreateOneWithoutInfluencerInput | null
}
export type InfluencerCreateInputInputObject =
  | Extract<keyof InfluencerCreateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface FileCreateManyWithoutInfluencerInput {
  create?: FileCreateWithoutInfluencerInput[]
  connect?: FileWhereUniqueInput[]
}
export type FileCreateManyWithoutInfluencerInputInputObject =
  | Extract<keyof FileCreateManyWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FileCreateWithoutInfluencerInput {
  secret?: string
  url?: string
  public_id?: string
  name?: string
  size?: number
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string
  mediaKit?: MediaKitCreateManyWithoutFilesInput | null
}
export type FileCreateWithoutInfluencerInputInputObject =
  | Extract<keyof FileCreateWithoutInfluencerInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  
export interface MediaKitCreateManyWithoutFilesInput {
  create?: MediaKitCreateWithoutFilesInput[]
  connect?: MediaKitWhereUniqueInput[]
}
export type MediaKitCreateManyWithoutFilesInputInputObject =
  | Extract<keyof MediaKitCreateManyWithoutFilesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MediaKitCreateWithoutFilesInput {
  influencer?: InfluencerCreateOneWithoutMediaKitInput | null
  interests?: InterestCreateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitCreateWithoutFilesInputInputObject =
  | Extract<keyof MediaKitCreateWithoutFilesInput, string>
  | { name: 'influencer', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface InfluencerCreateOneWithoutMediaKitInput {
  create?: InfluencerCreateWithoutMediaKitInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerCreateOneWithoutMediaKitInputInputObject =
  | Extract<keyof InfluencerCreateOneWithoutMediaKitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerCreateWithoutMediaKitInput {
  email?: string
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string
  verified?: boolean | null
  specialty?: string | null
  location?: LocationCreateOneWithoutInfluencerInput | null
  files?: FileCreateManyWithoutInfluencerInput | null
  social?: SocialCreateOneWithoutInfluencerInput | null
}
export type InfluencerCreateWithoutMediaKitInputInputObject =
  | Extract<keyof InfluencerCreateWithoutMediaKitInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface SocialCreateOneWithoutInfluencerInput {
  create?: SocialCreateWithoutInfluencerInput | null
  connect?: SocialWhereUniqueInput | null
}
export type SocialCreateOneWithoutInfluencerInputInputObject =
  | Extract<keyof SocialCreateOneWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SocialCreateWithoutInfluencerInput {
  status?: prisma.Status
  instagram?: InstagramCreateOneInput | null
  youtube?: YoutubeCreateOneInput | null
  twitter?: TwitterCreateOneInput | null
}
export type SocialCreateWithoutInfluencerInputInputObject =
  | Extract<keyof SocialCreateWithoutInfluencerInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'instagram', alias?: string  } 
  | { name: 'youtube', alias?: string  } 
  | { name: 'twitter', alias?: string  } 
  
export interface InstagramCreateOneInput {
  create?: InstagramCreateInput | null
  connect?: InstagramWhereUniqueInput | null
}
export type InstagramCreateOneInputInputObject =
  | Extract<keyof InstagramCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InstagramCreateInput {
  handle?: string | null
  followers?: number | null
  analytics?: undefined | null
  link?: string | null
}
export type InstagramCreateInputInputObject =
  | Extract<keyof InstagramCreateInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface YoutubeCreateOneInput {
  create?: YoutubeCreateInput | null
  connect?: YoutubeWhereUniqueInput | null
}
export type YoutubeCreateOneInputInputObject =
  | Extract<keyof YoutubeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface YoutubeCreateInput {
  followers?: number | null
  analytics?: undefined | null
  handle?: string | null
  link?: string | null
}
export type YoutubeCreateInputInputObject =
  | Extract<keyof YoutubeCreateInput, string>
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface TwitterCreateOneInput {
  create?: TwitterCreateInput | null
  connect?: TwitterWhereUniqueInput | null
}
export type TwitterCreateOneInputInputObject =
  | Extract<keyof TwitterCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TwitterCreateInput {
  analytics?: undefined | null
  followers?: number | null
  handle?: string | null
  link?: string | null
}
export type TwitterCreateInputInputObject =
  | Extract<keyof TwitterCreateInput, string>
  | { name: 'analytics', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface FileUpdateInput {
  secret?: string | null
  url?: string | null
  public_id?: string | null
  name?: string | null
  size?: number | null
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string | null
  influencer?: InfluencerUpdateOneRequiredWithoutFilesInput | null
  mediaKit?: MediaKitUpdateManyWithoutFilesInput | null
}
export type FileUpdateInputInputObject =
  | Extract<keyof FileUpdateInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  
export interface InfluencerUpdateOneRequiredWithoutFilesInput {
  create?: InfluencerCreateWithoutFilesInput | null
  update?: InfluencerUpdateWithoutFilesDataInput | null
  upsert?: InfluencerUpsertWithoutFilesInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerUpdateOneRequiredWithoutFilesInputInputObject =
  | Extract<keyof InfluencerUpdateOneRequiredWithoutFilesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerUpdateWithoutFilesDataInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  location?: LocationUpdateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitUpdateManyWithoutInfluencerInput | null
  social?: SocialUpdateOneWithoutInfluencerInput | null
}
export type InfluencerUpdateWithoutFilesDataInputInputObject =
  | Extract<keyof InfluencerUpdateWithoutFilesDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface LocationUpdateOneWithoutInfluencerInput {
  create?: LocationCreateWithoutInfluencerInput | null
  update?: LocationUpdateWithoutInfluencerDataInput | null
  upsert?: LocationUpsertWithoutInfluencerInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationUpdateOneWithoutInfluencerInputInputObject =
  | Extract<keyof LocationUpdateOneWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationUpdateWithoutInfluencerDataInput {
  name?: string | null
  geo?: GeoUpdateOneWithoutLocationInput | null
}
export type LocationUpdateWithoutInfluencerDataInputInputObject =
  | Extract<keyof LocationUpdateWithoutInfluencerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'geo', alias?: string  } 
  
export interface GeoUpdateOneWithoutLocationInput {
  create?: GeoCreateWithoutLocationInput | null
  update?: GeoUpdateWithoutLocationDataInput | null
  upsert?: GeoUpsertWithoutLocationInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: GeoWhereUniqueInput | null
}
export type GeoUpdateOneWithoutLocationInputInputObject =
  | Extract<keyof GeoUpdateOneWithoutLocationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GeoUpdateWithoutLocationDataInput {
  lat?: number | null
  lng?: number | null
}
export type GeoUpdateWithoutLocationDataInputInputObject =
  | Extract<keyof GeoUpdateWithoutLocationDataInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface GeoUpsertWithoutLocationInput {
  update?: GeoUpdateWithoutLocationDataInput
  create?: GeoCreateWithoutLocationInput
}
export type GeoUpsertWithoutLocationInputInputObject =
  | Extract<keyof GeoUpsertWithoutLocationInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LocationUpsertWithoutInfluencerInput {
  update?: LocationUpdateWithoutInfluencerDataInput
  create?: LocationCreateWithoutInfluencerInput
}
export type LocationUpsertWithoutInfluencerInputInputObject =
  | Extract<keyof LocationUpsertWithoutInfluencerInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MediaKitUpdateManyWithoutInfluencerInput {
  create?: MediaKitCreateWithoutInfluencerInput[]
  delete?: MediaKitWhereUniqueInput[]
  connect?: MediaKitWhereUniqueInput[]
  set?: MediaKitWhereUniqueInput[]
  disconnect?: MediaKitWhereUniqueInput[]
  update?: MediaKitUpdateWithWhereUniqueWithoutInfluencerInput[]
  upsert?: MediaKitUpsertWithWhereUniqueWithoutInfluencerInput[]
  deleteMany?: MediaKitScalarWhereInput[]
  updateMany?: MediaKitUpdateManyWithWhereNestedInput[]
}
export type MediaKitUpdateManyWithoutInfluencerInputInputObject =
  | Extract<keyof MediaKitUpdateManyWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MediaKitUpdateWithWhereUniqueWithoutInfluencerInput {
  where?: MediaKitWhereUniqueInput
  data?: MediaKitUpdateWithoutInfluencerDataInput
}
export type MediaKitUpdateWithWhereUniqueWithoutInfluencerInputInputObject =
  | Extract<keyof MediaKitUpdateWithWhereUniqueWithoutInfluencerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MediaKitUpdateWithoutInfluencerDataInput {
  files?: FileUpdateManyWithoutMediaKitInput | null
  interests?: InterestUpdateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitUpdateWithoutInfluencerDataInputInputObject =
  | Extract<keyof MediaKitUpdateWithoutInfluencerDataInput, string>
  | { name: 'files', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface FileUpdateManyWithoutMediaKitInput {
  create?: FileCreateWithoutMediaKitInput[]
  delete?: FileWhereUniqueInput[]
  connect?: FileWhereUniqueInput[]
  set?: FileWhereUniqueInput[]
  disconnect?: FileWhereUniqueInput[]
  update?: FileUpdateWithWhereUniqueWithoutMediaKitInput[]
  upsert?: FileUpsertWithWhereUniqueWithoutMediaKitInput[]
  deleteMany?: FileScalarWhereInput[]
  updateMany?: FileUpdateManyWithWhereNestedInput[]
}
export type FileUpdateManyWithoutMediaKitInputInputObject =
  | Extract<keyof FileUpdateManyWithoutMediaKitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FileUpdateWithWhereUniqueWithoutMediaKitInput {
  where?: FileWhereUniqueInput
  data?: FileUpdateWithoutMediaKitDataInput
}
export type FileUpdateWithWhereUniqueWithoutMediaKitInputInputObject =
  | Extract<keyof FileUpdateWithWhereUniqueWithoutMediaKitInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FileUpdateWithoutMediaKitDataInput {
  secret?: string | null
  url?: string | null
  public_id?: string | null
  name?: string | null
  size?: number | null
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string | null
  influencer?: InfluencerUpdateOneRequiredWithoutFilesInput | null
}
export type FileUpdateWithoutMediaKitDataInputInputObject =
  | Extract<keyof FileUpdateWithoutMediaKitDataInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface FileUpsertWithWhereUniqueWithoutMediaKitInput {
  where?: FileWhereUniqueInput
  update?: FileUpdateWithoutMediaKitDataInput
  create?: FileCreateWithoutMediaKitInput
}
export type FileUpsertWithWhereUniqueWithoutMediaKitInputInputObject =
  | Extract<keyof FileUpsertWithWhereUniqueWithoutMediaKitInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FileScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  secret?: string | null
  secret_not?: string | null
  secret_in?: string[]
  secret_not_in?: string[]
  secret_lt?: string | null
  secret_lte?: string | null
  secret_gt?: string | null
  secret_gte?: string | null
  secret_contains?: string | null
  secret_not_contains?: string | null
  secret_starts_with?: string | null
  secret_not_starts_with?: string | null
  secret_ends_with?: string | null
  secret_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  public_id?: string | null
  public_id_not?: string | null
  public_id_in?: string[]
  public_id_not_in?: string[]
  public_id_lt?: string | null
  public_id_lte?: string | null
  public_id_gt?: string | null
  public_id_gte?: string | null
  public_id_contains?: string | null
  public_id_not_contains?: string | null
  public_id_starts_with?: string | null
  public_id_not_starts_with?: string | null
  public_id_ends_with?: string | null
  public_id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  size?: number | null
  size_not?: number | null
  size_in?: number[]
  size_not_in?: number[]
  size_lt?: number | null
  size_lte?: number | null
  size_gt?: number | null
  size_gte?: number | null
  width?: number | null
  width_not?: number | null
  width_in?: number[]
  width_not_in?: number[]
  width_lt?: number | null
  width_lte?: number | null
  width_gt?: number | null
  width_gte?: number | null
  height?: number | null
  height_not?: number | null
  height_in?: number[]
  height_not_in?: number[]
  height_lt?: number | null
  height_lte?: number | null
  height_gt?: number | null
  height_gte?: number | null
  resource_type?: string | null
  resource_type_not?: string | null
  resource_type_in?: string[]
  resource_type_not_in?: string[]
  resource_type_lt?: string | null
  resource_type_lte?: string | null
  resource_type_gt?: string | null
  resource_type_gte?: string | null
  resource_type_contains?: string | null
  resource_type_not_contains?: string | null
  resource_type_starts_with?: string | null
  resource_type_not_starts_with?: string | null
  resource_type_ends_with?: string | null
  resource_type_not_ends_with?: string | null
  contentType?: string | null
  contentType_not?: string | null
  contentType_in?: string[]
  contentType_not_in?: string[]
  contentType_lt?: string | null
  contentType_lte?: string | null
  contentType_gt?: string | null
  contentType_gte?: string | null
  contentType_contains?: string | null
  contentType_not_contains?: string | null
  contentType_starts_with?: string | null
  contentType_not_starts_with?: string | null
  contentType_ends_with?: string | null
  contentType_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: FileScalarWhereInput[]
  OR?: FileScalarWhereInput[]
  NOT?: FileScalarWhereInput[]
}
export type FileScalarWhereInputInputObject =
  | Extract<keyof FileScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'secret', alias?: string  } 
  | { name: 'secret_not', alias?: string  } 
  | { name: 'secret_in', alias?: string  } 
  | { name: 'secret_not_in', alias?: string  } 
  | { name: 'secret_lt', alias?: string  } 
  | { name: 'secret_lte', alias?: string  } 
  | { name: 'secret_gt', alias?: string  } 
  | { name: 'secret_gte', alias?: string  } 
  | { name: 'secret_contains', alias?: string  } 
  | { name: 'secret_not_contains', alias?: string  } 
  | { name: 'secret_starts_with', alias?: string  } 
  | { name: 'secret_not_starts_with', alias?: string  } 
  | { name: 'secret_ends_with', alias?: string  } 
  | { name: 'secret_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'public_id_not', alias?: string  } 
  | { name: 'public_id_in', alias?: string  } 
  | { name: 'public_id_not_in', alias?: string  } 
  | { name: 'public_id_lt', alias?: string  } 
  | { name: 'public_id_lte', alias?: string  } 
  | { name: 'public_id_gt', alias?: string  } 
  | { name: 'public_id_gte', alias?: string  } 
  | { name: 'public_id_contains', alias?: string  } 
  | { name: 'public_id_not_contains', alias?: string  } 
  | { name: 'public_id_starts_with', alias?: string  } 
  | { name: 'public_id_not_starts_with', alias?: string  } 
  | { name: 'public_id_ends_with', alias?: string  } 
  | { name: 'public_id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'size_not', alias?: string  } 
  | { name: 'size_in', alias?: string  } 
  | { name: 'size_not_in', alias?: string  } 
  | { name: 'size_lt', alias?: string  } 
  | { name: 'size_lte', alias?: string  } 
  | { name: 'size_gt', alias?: string  } 
  | { name: 'size_gte', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'width_not', alias?: string  } 
  | { name: 'width_in', alias?: string  } 
  | { name: 'width_not_in', alias?: string  } 
  | { name: 'width_lt', alias?: string  } 
  | { name: 'width_lte', alias?: string  } 
  | { name: 'width_gt', alias?: string  } 
  | { name: 'width_gte', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'height_not', alias?: string  } 
  | { name: 'height_in', alias?: string  } 
  | { name: 'height_not_in', alias?: string  } 
  | { name: 'height_lt', alias?: string  } 
  | { name: 'height_lte', alias?: string  } 
  | { name: 'height_gt', alias?: string  } 
  | { name: 'height_gte', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'resource_type_not', alias?: string  } 
  | { name: 'resource_type_in', alias?: string  } 
  | { name: 'resource_type_not_in', alias?: string  } 
  | { name: 'resource_type_lt', alias?: string  } 
  | { name: 'resource_type_lte', alias?: string  } 
  | { name: 'resource_type_gt', alias?: string  } 
  | { name: 'resource_type_gte', alias?: string  } 
  | { name: 'resource_type_contains', alias?: string  } 
  | { name: 'resource_type_not_contains', alias?: string  } 
  | { name: 'resource_type_starts_with', alias?: string  } 
  | { name: 'resource_type_not_starts_with', alias?: string  } 
  | { name: 'resource_type_ends_with', alias?: string  } 
  | { name: 'resource_type_not_ends_with', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'contentType_not', alias?: string  } 
  | { name: 'contentType_in', alias?: string  } 
  | { name: 'contentType_not_in', alias?: string  } 
  | { name: 'contentType_lt', alias?: string  } 
  | { name: 'contentType_lte', alias?: string  } 
  | { name: 'contentType_gt', alias?: string  } 
  | { name: 'contentType_gte', alias?: string  } 
  | { name: 'contentType_contains', alias?: string  } 
  | { name: 'contentType_not_contains', alias?: string  } 
  | { name: 'contentType_starts_with', alias?: string  } 
  | { name: 'contentType_not_starts_with', alias?: string  } 
  | { name: 'contentType_ends_with', alias?: string  } 
  | { name: 'contentType_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FileUpdateManyWithWhereNestedInput {
  where?: FileScalarWhereInput
  data?: FileUpdateManyDataInput
}
export type FileUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof FileUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FileUpdateManyDataInput {
  secret?: string | null
  url?: string | null
  public_id?: string | null
  name?: string | null
  size?: number | null
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string | null
}
export type FileUpdateManyDataInputInputObject =
  | Extract<keyof FileUpdateManyDataInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  
export interface InterestUpdateManyInput {
  create?: InterestCreateInput[]
  update?: InterestUpdateWithWhereUniqueNestedInput[]
  upsert?: InterestUpsertWithWhereUniqueNestedInput[]
  delete?: InterestWhereUniqueInput[]
  connect?: InterestWhereUniqueInput[]
  set?: InterestWhereUniqueInput[]
  disconnect?: InterestWhereUniqueInput[]
  deleteMany?: InterestScalarWhereInput[]
  updateMany?: InterestUpdateManyWithWhereNestedInput[]
}
export type InterestUpdateManyInputInputObject =
  | Extract<keyof InterestUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface InterestUpdateWithWhereUniqueNestedInput {
  where?: InterestWhereUniqueInput
  data?: InterestUpdateDataInput
}
export type InterestUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof InterestUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InterestUpdateDataInput {
  tag?: string | null
  influencer?: InfluencerUpdateOneInput | null
}
export type InterestUpdateDataInputInputObject =
  | Extract<keyof InterestUpdateDataInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerUpdateOneInput {
  create?: InfluencerCreateInput | null
  update?: InfluencerUpdateDataInput | null
  upsert?: InfluencerUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerUpdateOneInputInputObject =
  | Extract<keyof InfluencerUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerUpdateDataInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  location?: LocationUpdateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitUpdateManyWithoutInfluencerInput | null
  files?: FileUpdateManyWithoutInfluencerInput | null
  social?: SocialUpdateOneWithoutInfluencerInput | null
}
export type InfluencerUpdateDataInputInputObject =
  | Extract<keyof InfluencerUpdateDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface FileUpdateManyWithoutInfluencerInput {
  create?: FileCreateWithoutInfluencerInput[]
  delete?: FileWhereUniqueInput[]
  connect?: FileWhereUniqueInput[]
  set?: FileWhereUniqueInput[]
  disconnect?: FileWhereUniqueInput[]
  update?: FileUpdateWithWhereUniqueWithoutInfluencerInput[]
  upsert?: FileUpsertWithWhereUniqueWithoutInfluencerInput[]
  deleteMany?: FileScalarWhereInput[]
  updateMany?: FileUpdateManyWithWhereNestedInput[]
}
export type FileUpdateManyWithoutInfluencerInputInputObject =
  | Extract<keyof FileUpdateManyWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface FileUpdateWithWhereUniqueWithoutInfluencerInput {
  where?: FileWhereUniqueInput
  data?: FileUpdateWithoutInfluencerDataInput
}
export type FileUpdateWithWhereUniqueWithoutInfluencerInputInputObject =
  | Extract<keyof FileUpdateWithWhereUniqueWithoutInfluencerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface FileUpdateWithoutInfluencerDataInput {
  secret?: string | null
  url?: string | null
  public_id?: string | null
  name?: string | null
  size?: number | null
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string | null
  mediaKit?: MediaKitUpdateManyWithoutFilesInput | null
}
export type FileUpdateWithoutInfluencerDataInputInputObject =
  | Extract<keyof FileUpdateWithoutInfluencerDataInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  
export interface MediaKitUpdateManyWithoutFilesInput {
  create?: MediaKitCreateWithoutFilesInput[]
  delete?: MediaKitWhereUniqueInput[]
  connect?: MediaKitWhereUniqueInput[]
  set?: MediaKitWhereUniqueInput[]
  disconnect?: MediaKitWhereUniqueInput[]
  update?: MediaKitUpdateWithWhereUniqueWithoutFilesInput[]
  upsert?: MediaKitUpsertWithWhereUniqueWithoutFilesInput[]
  deleteMany?: MediaKitScalarWhereInput[]
  updateMany?: MediaKitUpdateManyWithWhereNestedInput[]
}
export type MediaKitUpdateManyWithoutFilesInputInputObject =
  | Extract<keyof MediaKitUpdateManyWithoutFilesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MediaKitUpdateWithWhereUniqueWithoutFilesInput {
  where?: MediaKitWhereUniqueInput
  data?: MediaKitUpdateWithoutFilesDataInput
}
export type MediaKitUpdateWithWhereUniqueWithoutFilesInputInputObject =
  | Extract<keyof MediaKitUpdateWithWhereUniqueWithoutFilesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MediaKitUpdateWithoutFilesDataInput {
  influencer?: InfluencerUpdateOneWithoutMediaKitInput | null
  interests?: InterestUpdateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitUpdateWithoutFilesDataInputInputObject =
  | Extract<keyof MediaKitUpdateWithoutFilesDataInput, string>
  | { name: 'influencer', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface InfluencerUpdateOneWithoutMediaKitInput {
  create?: InfluencerCreateWithoutMediaKitInput | null
  update?: InfluencerUpdateWithoutMediaKitDataInput | null
  upsert?: InfluencerUpsertWithoutMediaKitInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerUpdateOneWithoutMediaKitInputInputObject =
  | Extract<keyof InfluencerUpdateOneWithoutMediaKitInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerUpdateWithoutMediaKitDataInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  location?: LocationUpdateOneWithoutInfluencerInput | null
  files?: FileUpdateManyWithoutInfluencerInput | null
  social?: SocialUpdateOneWithoutInfluencerInput | null
}
export type InfluencerUpdateWithoutMediaKitDataInputInputObject =
  | Extract<keyof InfluencerUpdateWithoutMediaKitDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface SocialUpdateOneWithoutInfluencerInput {
  create?: SocialCreateWithoutInfluencerInput | null
  update?: SocialUpdateWithoutInfluencerDataInput | null
  upsert?: SocialUpsertWithoutInfluencerInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SocialWhereUniqueInput | null
}
export type SocialUpdateOneWithoutInfluencerInputInputObject =
  | Extract<keyof SocialUpdateOneWithoutInfluencerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SocialUpdateWithoutInfluencerDataInput {
  status?: prisma.Status | null
  instagram?: InstagramUpdateOneInput | null
  youtube?: YoutubeUpdateOneInput | null
  twitter?: TwitterUpdateOneInput | null
}
export type SocialUpdateWithoutInfluencerDataInputInputObject =
  | Extract<keyof SocialUpdateWithoutInfluencerDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'instagram', alias?: string  } 
  | { name: 'youtube', alias?: string  } 
  | { name: 'twitter', alias?: string  } 
  
export interface InstagramUpdateOneInput {
  create?: InstagramCreateInput | null
  update?: InstagramUpdateDataInput | null
  upsert?: InstagramUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InstagramWhereUniqueInput | null
}
export type InstagramUpdateOneInputInputObject =
  | Extract<keyof InstagramUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InstagramUpdateDataInput {
  handle?: string | null
  followers?: number | null
  analytics?: undefined | null
  link?: string | null
}
export type InstagramUpdateDataInputInputObject =
  | Extract<keyof InstagramUpdateDataInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface InstagramUpsertNestedInput {
  update?: InstagramUpdateDataInput
  create?: InstagramCreateInput
}
export type InstagramUpsertNestedInputInputObject =
  | Extract<keyof InstagramUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface YoutubeUpdateOneInput {
  create?: YoutubeCreateInput | null
  update?: YoutubeUpdateDataInput | null
  upsert?: YoutubeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: YoutubeWhereUniqueInput | null
}
export type YoutubeUpdateOneInputInputObject =
  | Extract<keyof YoutubeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface YoutubeUpdateDataInput {
  followers?: number | null
  analytics?: undefined | null
  handle?: string | null
  link?: string | null
}
export type YoutubeUpdateDataInputInputObject =
  | Extract<keyof YoutubeUpdateDataInput, string>
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface YoutubeUpsertNestedInput {
  update?: YoutubeUpdateDataInput
  create?: YoutubeCreateInput
}
export type YoutubeUpsertNestedInputInputObject =
  | Extract<keyof YoutubeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TwitterUpdateOneInput {
  create?: TwitterCreateInput | null
  update?: TwitterUpdateDataInput | null
  upsert?: TwitterUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TwitterWhereUniqueInput | null
}
export type TwitterUpdateOneInputInputObject =
  | Extract<keyof TwitterUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TwitterUpdateDataInput {
  analytics?: undefined | null
  followers?: number | null
  handle?: string | null
  link?: string | null
}
export type TwitterUpdateDataInputInputObject =
  | Extract<keyof TwitterUpdateDataInput, string>
  | { name: 'analytics', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface TwitterUpsertNestedInput {
  update?: TwitterUpdateDataInput
  create?: TwitterCreateInput
}
export type TwitterUpsertNestedInputInputObject =
  | Extract<keyof TwitterUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SocialUpsertWithoutInfluencerInput {
  update?: SocialUpdateWithoutInfluencerDataInput
  create?: SocialCreateWithoutInfluencerInput
}
export type SocialUpsertWithoutInfluencerInputInputObject =
  | Extract<keyof SocialUpsertWithoutInfluencerInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InfluencerUpsertWithoutMediaKitInput {
  update?: InfluencerUpdateWithoutMediaKitDataInput
  create?: InfluencerCreateWithoutMediaKitInput
}
export type InfluencerUpsertWithoutMediaKitInputInputObject =
  | Extract<keyof InfluencerUpsertWithoutMediaKitInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MediaKitUpsertWithWhereUniqueWithoutFilesInput {
  where?: MediaKitWhereUniqueInput
  update?: MediaKitUpdateWithoutFilesDataInput
  create?: MediaKitCreateWithoutFilesInput
}
export type MediaKitUpsertWithWhereUniqueWithoutFilesInputInputObject =
  | Extract<keyof MediaKitUpsertWithWhereUniqueWithoutFilesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MediaKitScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: MediaKitScalarWhereInput[]
  OR?: MediaKitScalarWhereInput[]
  NOT?: MediaKitScalarWhereInput[]
}
export type MediaKitScalarWhereInputInputObject =
  | Extract<keyof MediaKitScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaKitUpdateManyWithWhereNestedInput {
  where?: MediaKitScalarWhereInput
  data?: MediaKitUpdateManyDataInput
}
export type MediaKitUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MediaKitUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MediaKitUpdateManyDataInput {
  status?: prisma.Status | null
}
export type MediaKitUpdateManyDataInputInputObject =
  | Extract<keyof MediaKitUpdateManyDataInput, string>
  | { name: 'status', alias?: string  } 
  
export interface FileUpsertWithWhereUniqueWithoutInfluencerInput {
  where?: FileWhereUniqueInput
  update?: FileUpdateWithoutInfluencerDataInput
  create?: FileCreateWithoutInfluencerInput
}
export type FileUpsertWithWhereUniqueWithoutInfluencerInputInputObject =
  | Extract<keyof FileUpsertWithWhereUniqueWithoutInfluencerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InfluencerUpsertNestedInput {
  update?: InfluencerUpdateDataInput
  create?: InfluencerCreateInput
}
export type InfluencerUpsertNestedInputInputObject =
  | Extract<keyof InfluencerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InterestUpsertWithWhereUniqueNestedInput {
  where?: InterestWhereUniqueInput
  update?: InterestUpdateDataInput
  create?: InterestCreateInput
}
export type InterestUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof InterestUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InterestScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  tag?: string | null
  tag_not?: string | null
  tag_in?: string[]
  tag_not_in?: string[]
  tag_lt?: string | null
  tag_lte?: string | null
  tag_gt?: string | null
  tag_gte?: string | null
  tag_contains?: string | null
  tag_not_contains?: string | null
  tag_starts_with?: string | null
  tag_not_starts_with?: string | null
  tag_ends_with?: string | null
  tag_not_ends_with?: string | null
  AND?: InterestScalarWhereInput[]
  OR?: InterestScalarWhereInput[]
  NOT?: InterestScalarWhereInput[]
}
export type InterestScalarWhereInputInputObject =
  | Extract<keyof InterestScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'tag_not', alias?: string  } 
  | { name: 'tag_in', alias?: string  } 
  | { name: 'tag_not_in', alias?: string  } 
  | { name: 'tag_lt', alias?: string  } 
  | { name: 'tag_lte', alias?: string  } 
  | { name: 'tag_gt', alias?: string  } 
  | { name: 'tag_gte', alias?: string  } 
  | { name: 'tag_contains', alias?: string  } 
  | { name: 'tag_not_contains', alias?: string  } 
  | { name: 'tag_starts_with', alias?: string  } 
  | { name: 'tag_not_starts_with', alias?: string  } 
  | { name: 'tag_ends_with', alias?: string  } 
  | { name: 'tag_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InterestUpdateManyWithWhereNestedInput {
  where?: InterestScalarWhereInput
  data?: InterestUpdateManyDataInput
}
export type InterestUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof InterestUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InterestUpdateManyDataInput {
  tag?: string | null
}
export type InterestUpdateManyDataInputInputObject =
  | Extract<keyof InterestUpdateManyDataInput, string>
  | { name: 'tag', alias?: string  } 
  
export interface MediaKitUpsertWithWhereUniqueWithoutInfluencerInput {
  where?: MediaKitWhereUniqueInput
  update?: MediaKitUpdateWithoutInfluencerDataInput
  create?: MediaKitCreateWithoutInfluencerInput
}
export type MediaKitUpsertWithWhereUniqueWithoutInfluencerInputInputObject =
  | Extract<keyof MediaKitUpsertWithWhereUniqueWithoutInfluencerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InfluencerUpsertWithoutFilesInput {
  update?: InfluencerUpdateWithoutFilesDataInput
  create?: InfluencerCreateWithoutFilesInput
}
export type InfluencerUpsertWithoutFilesInputInputObject =
  | Extract<keyof InfluencerUpsertWithoutFilesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FileUpdateManyMutationInput {
  secret?: string | null
  url?: string | null
  public_id?: string | null
  name?: string | null
  size?: number | null
  width?: number | null
  height?: number | null
  resource_type?: string | null
  contentType?: string | null
}
export type FileUpdateManyMutationInputInputObject =
  | Extract<keyof FileUpdateManyMutationInput, string>
  | { name: 'secret', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'public_id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'width', alias?: string  } 
  | { name: 'height', alias?: string  } 
  | { name: 'resource_type', alias?: string  } 
  | { name: 'contentType', alias?: string  } 
  
export interface LocationCreateInput {
  name?: string | null
  geo?: GeoCreateOneWithoutLocationInput | null
  influencer?: InfluencerCreateOneWithoutLocationInput | null
}
export type LocationCreateInputInputObject =
  | Extract<keyof LocationCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'geo', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerCreateOneWithoutLocationInput {
  create?: InfluencerCreateWithoutLocationInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerCreateOneWithoutLocationInputInputObject =
  | Extract<keyof InfluencerCreateOneWithoutLocationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerCreateWithoutLocationInput {
  email?: string
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string
  verified?: boolean | null
  specialty?: string | null
  mediaKit?: MediaKitCreateManyWithoutInfluencerInput | null
  files?: FileCreateManyWithoutInfluencerInput | null
  social?: SocialCreateOneWithoutInfluencerInput | null
}
export type InfluencerCreateWithoutLocationInputInputObject =
  | Extract<keyof InfluencerCreateWithoutLocationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface LocationUpdateInput {
  name?: string | null
  geo?: GeoUpdateOneWithoutLocationInput | null
  influencer?: InfluencerUpdateOneWithoutLocationInput | null
}
export type LocationUpdateInputInputObject =
  | Extract<keyof LocationUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'geo', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerUpdateOneWithoutLocationInput {
  create?: InfluencerCreateWithoutLocationInput | null
  update?: InfluencerUpdateWithoutLocationDataInput | null
  upsert?: InfluencerUpsertWithoutLocationInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerUpdateOneWithoutLocationInputInputObject =
  | Extract<keyof InfluencerUpdateOneWithoutLocationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerUpdateWithoutLocationDataInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  mediaKit?: MediaKitUpdateManyWithoutInfluencerInput | null
  files?: FileUpdateManyWithoutInfluencerInput | null
  social?: SocialUpdateOneWithoutInfluencerInput | null
}
export type InfluencerUpdateWithoutLocationDataInputInputObject =
  | Extract<keyof InfluencerUpdateWithoutLocationDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface InfluencerUpsertWithoutLocationInput {
  update?: InfluencerUpdateWithoutLocationDataInput
  create?: InfluencerCreateWithoutLocationInput
}
export type InfluencerUpsertWithoutLocationInputInputObject =
  | Extract<keyof InfluencerUpsertWithoutLocationInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LocationUpdateManyMutationInput {
  name?: string | null
}
export type LocationUpdateManyMutationInputInputObject =
  | Extract<keyof LocationUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface GeoCreateInput {
  lat?: number | null
  lng?: number | null
  location?: LocationCreateOneWithoutGeoInput | null
}
export type GeoCreateInputInputObject =
  | Extract<keyof GeoCreateInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface LocationCreateOneWithoutGeoInput {
  create?: LocationCreateWithoutGeoInput | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationCreateOneWithoutGeoInputInputObject =
  | Extract<keyof LocationCreateOneWithoutGeoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationCreateWithoutGeoInput {
  name?: string | null
  influencer?: InfluencerCreateOneWithoutLocationInput | null
}
export type LocationCreateWithoutGeoInputInputObject =
  | Extract<keyof LocationCreateWithoutGeoInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface GeoUpdateInput {
  lat?: number | null
  lng?: number | null
  location?: LocationUpdateOneWithoutGeoInput | null
}
export type GeoUpdateInputInputObject =
  | Extract<keyof GeoUpdateInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface LocationUpdateOneWithoutGeoInput {
  create?: LocationCreateWithoutGeoInput | null
  update?: LocationUpdateWithoutGeoDataInput | null
  upsert?: LocationUpsertWithoutGeoInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: LocationWhereUniqueInput | null
}
export type LocationUpdateOneWithoutGeoInputInputObject =
  | Extract<keyof LocationUpdateOneWithoutGeoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LocationUpdateWithoutGeoDataInput {
  name?: string | null
  influencer?: InfluencerUpdateOneWithoutLocationInput | null
}
export type LocationUpdateWithoutGeoDataInputInputObject =
  | Extract<keyof LocationUpdateWithoutGeoDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface LocationUpsertWithoutGeoInput {
  update?: LocationUpdateWithoutGeoDataInput
  create?: LocationCreateWithoutGeoInput
}
export type LocationUpsertWithoutGeoInputInputObject =
  | Extract<keyof LocationUpsertWithoutGeoInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface GeoUpdateManyMutationInput {
  lat?: number | null
  lng?: number | null
}
export type GeoUpdateManyMutationInputInputObject =
  | Extract<keyof GeoUpdateManyMutationInput, string>
  | { name: 'lat', alias?: string  } 
  | { name: 'lng', alias?: string  } 
  
export interface InfluencerUpdateInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  location?: LocationUpdateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitUpdateManyWithoutInfluencerInput | null
  files?: FileUpdateManyWithoutInfluencerInput | null
  social?: SocialUpdateOneWithoutInfluencerInput | null
}
export type InfluencerUpdateInputInputObject =
  | Extract<keyof InfluencerUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'social', alias?: string  } 
  
export interface InfluencerUpdateManyMutationInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
}
export type InfluencerUpdateManyMutationInputInputObject =
  | Extract<keyof InfluencerUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  
export interface MediaKitCreateInput {
  influencer?: InfluencerCreateOneWithoutMediaKitInput | null
  files?: FileCreateManyWithoutMediaKitInput | null
  interests?: InterestCreateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitCreateInputInputObject =
  | Extract<keyof MediaKitCreateInput, string>
  | { name: 'influencer', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MediaKitUpdateInput {
  influencer?: InfluencerUpdateOneWithoutMediaKitInput | null
  files?: FileUpdateManyWithoutMediaKitInput | null
  interests?: InterestUpdateManyInput | null
  status?: prisma.Status | null
}
export type MediaKitUpdateInputInputObject =
  | Extract<keyof MediaKitUpdateInput, string>
  | { name: 'influencer', alias?: string  } 
  | { name: 'files', alias?: string  } 
  | { name: 'interests', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MediaKitUpdateManyMutationInput {
  status?: prisma.Status | null
}
export type MediaKitUpdateManyMutationInputInputObject =
  | Extract<keyof MediaKitUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  
export interface InterestUpdateInput {
  tag?: string | null
  influencer?: InfluencerUpdateOneInput | null
}
export type InterestUpdateInputInputObject =
  | Extract<keyof InterestUpdateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InterestUpdateManyMutationInput {
  tag?: string | null
}
export type InterestUpdateManyMutationInputInputObject =
  | Extract<keyof InterestUpdateManyMutationInput, string>
  | { name: 'tag', alias?: string  } 
  
export interface JobsCreateInput {
  status?: prisma.Status | null
  company?: CompanyCreateOneWithoutJobsInput | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsCreateInputInputObject =
  | Extract<keyof JobsCreateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface CompanyCreateOneWithoutJobsInput {
  create?: CompanyCreateWithoutJobsInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutJobsInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutJobsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutJobsInput {
  status?: prisma.Status | null
  hires?: InfluencerCreateOneInput | null
  feedback?: FeedbackCreateOneWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyCreateWithoutJobsInputInputObject =
  | Extract<keyof CompanyCreateWithoutJobsInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'feedback', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface FeedbackCreateOneWithoutCompanyInput {
  create?: FeedbackCreateWithoutCompanyInput | null
  connect?: FeedbackWhereUniqueInput | null
}
export type FeedbackCreateOneWithoutCompanyInputInputObject =
  | Extract<keyof FeedbackCreateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackCreateWithoutCompanyInput {
  status?: prisma.Status | null
  influencer?: InfluencerCreateOneInput | null
  comment?: string | null
}
export type FeedbackCreateWithoutCompanyInputInputObject =
  | Extract<keyof FeedbackCreateWithoutCompanyInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface JobsUpdateInput {
  status?: prisma.Status | null
  company?: CompanyUpdateOneWithoutJobsInput | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsUpdateInputInputObject =
  | Extract<keyof JobsUpdateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface CompanyUpdateOneWithoutJobsInput {
  create?: CompanyCreateWithoutJobsInput | null
  update?: CompanyUpdateWithoutJobsDataInput | null
  upsert?: CompanyUpsertWithoutJobsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneWithoutJobsInputInputObject =
  | Extract<keyof CompanyUpdateOneWithoutJobsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutJobsDataInput {
  status?: prisma.Status | null
  hires?: InfluencerUpdateOneInput | null
  feedback?: FeedbackUpdateOneWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyUpdateWithoutJobsDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutJobsDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'feedback', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface FeedbackUpdateOneWithoutCompanyInput {
  create?: FeedbackCreateWithoutCompanyInput | null
  update?: FeedbackUpdateWithoutCompanyDataInput | null
  upsert?: FeedbackUpsertWithoutCompanyInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FeedbackWhereUniqueInput | null
}
export type FeedbackUpdateOneWithoutCompanyInputInputObject =
  | Extract<keyof FeedbackUpdateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FeedbackUpdateWithoutCompanyDataInput {
  status?: prisma.Status | null
  influencer?: InfluencerUpdateOneInput | null
  comment?: string | null
}
export type FeedbackUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof FeedbackUpdateWithoutCompanyDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface FeedbackUpsertWithoutCompanyInput {
  update?: FeedbackUpdateWithoutCompanyDataInput
  create?: FeedbackCreateWithoutCompanyInput
}
export type FeedbackUpsertWithoutCompanyInputInputObject =
  | Extract<keyof FeedbackUpsertWithoutCompanyInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyUpsertWithoutJobsInput {
  update?: CompanyUpdateWithoutJobsDataInput
  create?: CompanyCreateWithoutJobsInput
}
export type CompanyUpsertWithoutJobsInputInputObject =
  | Extract<keyof CompanyUpsertWithoutJobsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface JobsUpdateManyMutationInput {
  status?: prisma.Status | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsUpdateManyMutationInputInputObject =
  | Extract<keyof JobsUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface SocialCreateInput {
  status?: prisma.Status
  instagram?: InstagramCreateOneInput | null
  youtube?: YoutubeCreateOneInput | null
  twitter?: TwitterCreateOneInput | null
  influencer?: InfluencerCreateOneWithoutSocialInput | null
}
export type SocialCreateInputInputObject =
  | Extract<keyof SocialCreateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'instagram', alias?: string  } 
  | { name: 'youtube', alias?: string  } 
  | { name: 'twitter', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerCreateOneWithoutSocialInput {
  create?: InfluencerCreateWithoutSocialInput | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerCreateOneWithoutSocialInputInputObject =
  | Extract<keyof InfluencerCreateOneWithoutSocialInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerCreateWithoutSocialInput {
  email?: string
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string
  verified?: boolean | null
  specialty?: string | null
  location?: LocationCreateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitCreateManyWithoutInfluencerInput | null
  files?: FileCreateManyWithoutInfluencerInput | null
}
export type InfluencerCreateWithoutSocialInputInputObject =
  | Extract<keyof InfluencerCreateWithoutSocialInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  
export interface SocialUpdateInput {
  status?: prisma.Status | null
  instagram?: InstagramUpdateOneInput | null
  youtube?: YoutubeUpdateOneInput | null
  twitter?: TwitterUpdateOneInput | null
  influencer?: InfluencerUpdateOneWithoutSocialInput | null
}
export type SocialUpdateInputInputObject =
  | Extract<keyof SocialUpdateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'instagram', alias?: string  } 
  | { name: 'youtube', alias?: string  } 
  | { name: 'twitter', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  
export interface InfluencerUpdateOneWithoutSocialInput {
  create?: InfluencerCreateWithoutSocialInput | null
  update?: InfluencerUpdateWithoutSocialDataInput | null
  upsert?: InfluencerUpsertWithoutSocialInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InfluencerWhereUniqueInput | null
}
export type InfluencerUpdateOneWithoutSocialInputInputObject =
  | Extract<keyof InfluencerUpdateOneWithoutSocialInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InfluencerUpdateWithoutSocialDataInput {
  email?: string | null
  handle?: string | null
  avatar?: string | null
  name?: string | null
  bio?: string | null
  password?: string | null
  verified?: boolean | null
  specialty?: string | null
  location?: LocationUpdateOneWithoutInfluencerInput | null
  mediaKit?: MediaKitUpdateManyWithoutInfluencerInput | null
  files?: FileUpdateManyWithoutInfluencerInput | null
}
export type InfluencerUpdateWithoutSocialDataInputInputObject =
  | Extract<keyof InfluencerUpdateWithoutSocialDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'verified', alias?: string  } 
  | { name: 'specialty', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'mediaKit', alias?: string  } 
  | { name: 'files', alias?: string  } 
  
export interface InfluencerUpsertWithoutSocialInput {
  update?: InfluencerUpdateWithoutSocialDataInput
  create?: InfluencerCreateWithoutSocialInput
}
export type InfluencerUpsertWithoutSocialInputInputObject =
  | Extract<keyof InfluencerUpsertWithoutSocialInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SocialUpdateManyMutationInput {
  status?: prisma.Status | null
}
export type SocialUpdateManyMutationInputInputObject =
  | Extract<keyof SocialUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  
export interface InstagramUpdateInput {
  handle?: string | null
  followers?: number | null
  analytics?: undefined | null
  link?: string | null
}
export type InstagramUpdateInputInputObject =
  | Extract<keyof InstagramUpdateInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface InstagramUpdateManyMutationInput {
  handle?: string | null
  followers?: number | null
  analytics?: undefined | null
  link?: string | null
}
export type InstagramUpdateManyMutationInputInputObject =
  | Extract<keyof InstagramUpdateManyMutationInput, string>
  | { name: 'handle', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface TwitterUpdateInput {
  analytics?: undefined | null
  followers?: number | null
  handle?: string | null
  link?: string | null
}
export type TwitterUpdateInputInputObject =
  | Extract<keyof TwitterUpdateInput, string>
  | { name: 'analytics', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface TwitterUpdateManyMutationInput {
  analytics?: undefined | null
  followers?: number | null
  handle?: string | null
  link?: string | null
}
export type TwitterUpdateManyMutationInputInputObject =
  | Extract<keyof TwitterUpdateManyMutationInput, string>
  | { name: 'analytics', alias?: string  } 
  | { name: 'followers', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface YoutubeUpdateInput {
  followers?: number | null
  analytics?: undefined | null
  handle?: string | null
  link?: string | null
}
export type YoutubeUpdateInputInputObject =
  | Extract<keyof YoutubeUpdateInput, string>
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface YoutubeUpdateManyMutationInput {
  followers?: number | null
  analytics?: undefined | null
  handle?: string | null
  link?: string | null
}
export type YoutubeUpdateManyMutationInputInputObject =
  | Extract<keyof YoutubeUpdateManyMutationInput, string>
  | { name: 'followers', alias?: string  } 
  | { name: 'analytics', alias?: string  } 
  | { name: 'handle', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface FeedbackCreateInput {
  status?: prisma.Status | null
  influencer?: InfluencerCreateOneInput | null
  company?: CompanyCreateOneWithoutFeedbackInput | null
  comment?: string | null
}
export type FeedbackCreateInputInputObject =
  | Extract<keyof FeedbackCreateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CompanyCreateOneWithoutFeedbackInput {
  create?: CompanyCreateWithoutFeedbackInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutFeedbackInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutFeedbackInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutFeedbackInput {
  status?: prisma.Status | null
  hires?: InfluencerCreateOneInput | null
  jobs?: JobsCreateManyWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyCreateWithoutFeedbackInputInputObject =
  | Extract<keyof CompanyCreateWithoutFeedbackInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'jobs', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface JobsCreateManyWithoutCompanyInput {
  create?: JobsCreateWithoutCompanyInput[]
  connect?: JobsWhereUniqueInput[]
}
export type JobsCreateManyWithoutCompanyInputInputObject =
  | Extract<keyof JobsCreateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface JobsCreateWithoutCompanyInput {
  status?: prisma.Status | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsCreateWithoutCompanyInputInputObject =
  | Extract<keyof JobsCreateWithoutCompanyInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface FeedbackUpdateInput {
  status?: prisma.Status | null
  influencer?: InfluencerUpdateOneInput | null
  company?: CompanyUpdateOneWithoutFeedbackInput | null
  comment?: string | null
}
export type FeedbackUpdateInputInputObject =
  | Extract<keyof FeedbackUpdateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'influencer', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CompanyUpdateOneWithoutFeedbackInput {
  create?: CompanyCreateWithoutFeedbackInput | null
  update?: CompanyUpdateWithoutFeedbackDataInput | null
  upsert?: CompanyUpsertWithoutFeedbackInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneWithoutFeedbackInputInputObject =
  | Extract<keyof CompanyUpdateOneWithoutFeedbackInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutFeedbackDataInput {
  status?: prisma.Status | null
  hires?: InfluencerUpdateOneInput | null
  jobs?: JobsUpdateManyWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyUpdateWithoutFeedbackDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutFeedbackDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'jobs', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface JobsUpdateManyWithoutCompanyInput {
  create?: JobsCreateWithoutCompanyInput[]
  delete?: JobsWhereUniqueInput[]
  connect?: JobsWhereUniqueInput[]
  set?: JobsWhereUniqueInput[]
  disconnect?: JobsWhereUniqueInput[]
  update?: JobsUpdateWithWhereUniqueWithoutCompanyInput[]
  upsert?: JobsUpsertWithWhereUniqueWithoutCompanyInput[]
  deleteMany?: JobsScalarWhereInput[]
  updateMany?: JobsUpdateManyWithWhereNestedInput[]
}
export type JobsUpdateManyWithoutCompanyInputInputObject =
  | Extract<keyof JobsUpdateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface JobsUpdateWithWhereUniqueWithoutCompanyInput {
  where?: JobsWhereUniqueInput
  data?: JobsUpdateWithoutCompanyDataInput
}
export type JobsUpdateWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof JobsUpdateWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface JobsUpdateWithoutCompanyDataInput {
  status?: prisma.Status | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof JobsUpdateWithoutCompanyDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface JobsUpsertWithWhereUniqueWithoutCompanyInput {
  where?: JobsWhereUniqueInput
  update?: JobsUpdateWithoutCompanyDataInput
  create?: JobsCreateWithoutCompanyInput
}
export type JobsUpsertWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof JobsUpsertWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface JobsScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  cost?: string | null
  cost_not?: string | null
  cost_in?: string[]
  cost_not_in?: string[]
  cost_lt?: string | null
  cost_lte?: string | null
  cost_gt?: string | null
  cost_gte?: string | null
  cost_contains?: string | null
  cost_not_contains?: string | null
  cost_starts_with?: string | null
  cost_not_starts_with?: string | null
  cost_ends_with?: string | null
  cost_not_ends_with?: string | null
  accepted?: boolean | null
  accepted_not?: boolean | null
  AND?: JobsScalarWhereInput[]
  OR?: JobsScalarWhereInput[]
  NOT?: JobsScalarWhereInput[]
}
export type JobsScalarWhereInputInputObject =
  | Extract<keyof JobsScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'cost_not', alias?: string  } 
  | { name: 'cost_in', alias?: string  } 
  | { name: 'cost_not_in', alias?: string  } 
  | { name: 'cost_lt', alias?: string  } 
  | { name: 'cost_lte', alias?: string  } 
  | { name: 'cost_gt', alias?: string  } 
  | { name: 'cost_gte', alias?: string  } 
  | { name: 'cost_contains', alias?: string  } 
  | { name: 'cost_not_contains', alias?: string  } 
  | { name: 'cost_starts_with', alias?: string  } 
  | { name: 'cost_not_starts_with', alias?: string  } 
  | { name: 'cost_ends_with', alias?: string  } 
  | { name: 'cost_not_ends_with', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  | { name: 'accepted_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface JobsUpdateManyWithWhereNestedInput {
  where?: JobsScalarWhereInput
  data?: JobsUpdateManyDataInput
}
export type JobsUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof JobsUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface JobsUpdateManyDataInput {
  status?: prisma.Status | null
  cost?: string | null
  accepted?: boolean | null
}
export type JobsUpdateManyDataInputInputObject =
  | Extract<keyof JobsUpdateManyDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'accepted', alias?: string  } 
  
export interface CompanyUpsertWithoutFeedbackInput {
  update?: CompanyUpdateWithoutFeedbackDataInput
  create?: CompanyCreateWithoutFeedbackInput
}
export type CompanyUpsertWithoutFeedbackInputInputObject =
  | Extract<keyof CompanyUpsertWithoutFeedbackInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FeedbackUpdateManyMutationInput {
  status?: prisma.Status | null
  comment?: string | null
}
export type FeedbackUpdateManyMutationInputInputObject =
  | Extract<keyof FeedbackUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CompanyCreateInput {
  status?: prisma.Status | null
  hires?: InfluencerCreateOneInput | null
  jobs?: JobsCreateManyWithoutCompanyInput | null
  feedback?: FeedbackCreateOneWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyCreateInputInputObject =
  | Extract<keyof CompanyCreateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'jobs', alias?: string  } 
  | { name: 'feedback', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface CompanyUpdateInput {
  status?: prisma.Status | null
  hires?: InfluencerUpdateOneInput | null
  jobs?: JobsUpdateManyWithoutCompanyInput | null
  feedback?: FeedbackUpdateOneWithoutCompanyInput | null
  name?: string | null
  location?: undefined | null
}
export type CompanyUpdateInputInputObject =
  | Extract<keyof CompanyUpdateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'hires', alias?: string  } 
  | { name: 'jobs', alias?: string  } 
  | { name: 'feedback', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface CompanyUpdateManyMutationInput {
  status?: prisma.Status | null
  name?: string | null
  location?: undefined | null
}
export type CompanyUpdateManyMutationInputInputObject =
  | Extract<keyof CompanyUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  
export interface FileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FileWhereInput | null
  AND?: FileSubscriptionWhereInput[]
  OR?: FileSubscriptionWhereInput[]
  NOT?: FileSubscriptionWhereInput[]
}
export type FileSubscriptionWhereInputInputObject =
  | Extract<keyof FileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LocationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LocationWhereInput | null
  AND?: LocationSubscriptionWhereInput[]
  OR?: LocationSubscriptionWhereInput[]
  NOT?: LocationSubscriptionWhereInput[]
}
export type LocationSubscriptionWhereInputInputObject =
  | Extract<keyof LocationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GeoSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GeoWhereInput | null
  AND?: GeoSubscriptionWhereInput[]
  OR?: GeoSubscriptionWhereInput[]
  NOT?: GeoSubscriptionWhereInput[]
}
export type GeoSubscriptionWhereInputInputObject =
  | Extract<keyof GeoSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InfluencerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InfluencerWhereInput | null
  AND?: InfluencerSubscriptionWhereInput[]
  OR?: InfluencerSubscriptionWhereInput[]
  NOT?: InfluencerSubscriptionWhereInput[]
}
export type InfluencerSubscriptionWhereInputInputObject =
  | Extract<keyof InfluencerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MediaKitSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MediaKitWhereInput | null
  AND?: MediaKitSubscriptionWhereInput[]
  OR?: MediaKitSubscriptionWhereInput[]
  NOT?: MediaKitSubscriptionWhereInput[]
}
export type MediaKitSubscriptionWhereInputInputObject =
  | Extract<keyof MediaKitSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InterestSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InterestWhereInput | null
  AND?: InterestSubscriptionWhereInput[]
  OR?: InterestSubscriptionWhereInput[]
  NOT?: InterestSubscriptionWhereInput[]
}
export type InterestSubscriptionWhereInputInputObject =
  | Extract<keyof InterestSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface JobsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: JobsWhereInput | null
  AND?: JobsSubscriptionWhereInput[]
  OR?: JobsSubscriptionWhereInput[]
  NOT?: JobsSubscriptionWhereInput[]
}
export type JobsSubscriptionWhereInputInputObject =
  | Extract<keyof JobsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SocialSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SocialWhereInput | null
  AND?: SocialSubscriptionWhereInput[]
  OR?: SocialSubscriptionWhereInput[]
  NOT?: SocialSubscriptionWhereInput[]
}
export type SocialSubscriptionWhereInputInputObject =
  | Extract<keyof SocialSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InstagramSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InstagramWhereInput | null
  AND?: InstagramSubscriptionWhereInput[]
  OR?: InstagramSubscriptionWhereInput[]
  NOT?: InstagramSubscriptionWhereInput[]
}
export type InstagramSubscriptionWhereInputInputObject =
  | Extract<keyof InstagramSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TwitterSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TwitterWhereInput | null
  AND?: TwitterSubscriptionWhereInput[]
  OR?: TwitterSubscriptionWhereInput[]
  NOT?: TwitterSubscriptionWhereInput[]
}
export type TwitterSubscriptionWhereInputInputObject =
  | Extract<keyof TwitterSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface YoutubeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: YoutubeWhereInput | null
  AND?: YoutubeSubscriptionWhereInput[]
  OR?: YoutubeSubscriptionWhereInput[]
  NOT?: YoutubeSubscriptionWhereInput[]
}
export type YoutubeSubscriptionWhereInputInputObject =
  | Extract<keyof YoutubeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FeedbackSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FeedbackWhereInput | null
  AND?: FeedbackSubscriptionWhereInput[]
  OR?: FeedbackSubscriptionWhereInput[]
  NOT?: FeedbackSubscriptionWhereInput[]
}
export type FeedbackSubscriptionWhereInputInputObject =
  | Extract<keyof FeedbackSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CompanyWhereInput | null
  AND?: CompanySubscriptionWhereInput[]
  OR?: CompanySubscriptionWhereInput[]
  NOT?: CompanySubscriptionWhereInput[]
}
export type CompanySubscriptionWhereInputInputObject =
  | Extract<keyof CompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type StatusValues =
  | 'DRAFT'
  | 'PUBLISHED'
  | 'ARCHIVED'
  
export type MediaKitOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  
export type FileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'secret_ASC'
  | 'secret_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'public_id_ASC'
  | 'public_id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'width_ASC'
  | 'width_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'resource_type_ASC'
  | 'resource_type_DESC'
  | 'contentType_ASC'
  | 'contentType_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InterestOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'tag_ASC'
  | 'tag_DESC'
  
export type LocationOrderByInputValues =
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  
export type GeoOrderByInputValues =
  | 'lat_ASC'
  | 'lat_DESC'
  | 'lng_ASC'
  | 'lng_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  
export type InfluencerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'avatar_ASC'
  | 'avatar_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'bio_ASC'
  | 'bio_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'verified_ASC'
  | 'verified_DESC'
  | 'specialty_ASC'
  | 'specialty_DESC'
  
export type JobsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'cost_ASC'
  | 'cost_DESC'
  | 'accepted_ASC'
  | 'accepted_DESC'
  
export type SocialOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  
export type InstagramOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'followers_ASC'
  | 'followers_DESC'
  | 'analytics_ASC'
  | 'analytics_DESC'
  | 'link_ASC'
  | 'link_DESC'
  
export type TwitterOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'analytics_ASC'
  | 'analytics_DESC'
  | 'followers_ASC'
  | 'followers_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'link_ASC'
  | 'link_DESC'
  
export type YoutubeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'followers_ASC'
  | 'followers_DESC'
  | 'analytics_ASC'
  | 'analytics_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'link_ASC'
  | 'link_DESC'
  
export type FeedbackOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  
export type CompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'location_ASC'
  | 'location_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  